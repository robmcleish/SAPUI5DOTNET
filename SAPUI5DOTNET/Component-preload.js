/**
* This file was auto-generated by SAP Web IDE build and includes all
* the source files required by SAPUI5 runtime for performance optimization.
* PLEASE DO NOT EDIT THIS FILE!! Changes will be overwritten the next time the build is run.
*/
jQuery.sap.registerPreloadedModules({
	"version": "2.0",
	"name": "whatever/Component-preload",
	"modules": {
		"whatever/Component.js": "sap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/Device\",\n\t\"whatever/model/models\",\n\t\"whatever/controller/ListSelector\",\n\t\"whatever/controller/ErrorHandler\"\n], function(UIComponent, Device, models, ListSelector, ErrorHandler) {\n\t\"use strict\";\n\n\n\treturn UIComponent.extend(\"whatever.Component\", {\n\n\t\tmetadata: {\n\t\t\tmanifest: \"json\"\n\t\t},\n\n\n\t\t/**\n\t\t * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.\n\t\t * In this method, the FLP and device models are set and the router is initialized.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tinit: function() {\n\t\t\tthis.oListSelector = new ListSelector();\n\t\t\tthis._oErrorHandler = new ErrorHandler(this);\n\n\t\t\t// set the device model\n\t\t\tthis.setModel(models.createDeviceModel(), \"device\");\n\t\t\t// set the FLP model\n\t\t\tthis.setModel(models.createFLPModel(), \"FLP\");\n\t\t\t\n\n\t\t\t// call the base component's init function and create the App view\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// create the views based on the url/hash\n\t\t\tthis.getRouter().initialize();\n\n\t\t},\n\n\t\t/**\n\t\t * The component is destroyed by UI5 automatically.\n\t\t * In this method, the ListSelector and ErrorHandler are destroyed.\n\t\t * @public\n\t\t * @override\n\t\t */\n\t\tdestroy: function() {\n\t\t\tthis.oListSelector.destroy();\n\t\t\tthis._oErrorHandler.destroy();\n\t\t\t// call the base component's destroy function\n\t\t\tUIComponent.prototype.destroy.apply(this, arguments);\n\t\t},\n\n\t\t/**\n\t\t * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n\t\t * design mode class should be set, which influences the size appearance of some controls.\n\t\t * @public\n\t\t * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n\t\t */\n\t\tgetContentDensityClass: function() {\n\t\t\tif (this._sContentDensityClass === undefined) {\n\t\t\t\t// check whether FLP has already set the content density class; do nothing in this case\n\t\t\t\tif (jQuery(document.body).hasClass(\"sapUiSizeCozy\") || jQuery(document.body).hasClass(\"sapUiSizeCompact\")) {\n\t\t\t\t\tthis._sContentDensityClass = \"\";\n\t\t\t\t} else if (!Device.support.touch) { // apply \"compact\" mode if touch is not supported\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCompact\";\n\t\t\t\t} else {\n\t\t\t\t\t// \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n\t\t\t\t\tthis._sContentDensityClass = \"sapUiSizeCozy\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._sContentDensityClass;\n\t\t}\n\n\t});\n\n});",
		"whatever/controller/App.controller.js": "sap.ui.define([\n\t\"whatever/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"./utilities\"\n], function(BaseController, JSONModel, utilities) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"whatever.controller.App\", {\n\n\t\tonInit: function() {\n\t\t\tvar oViewModel,\n\t\t\t\tfnSetAppNotBusy,\n\t\t\t\toListSelector = this.getOwnerComponent().oListSelector,\n\t\t\t\tiOriginalBusyDelay = this.getView().getBusyIndicatorDelay();\n\n\t\t\toViewModel = new JSONModel({\n\t\t\t\tbusy: true,\n\t\t\t\tdelay: 0,\n\t\t\t\titemToSelect: null,\n\t\t\t\taddEnabled: false\n\n\t\t\t});\n\t\t\tthis.setModel(oViewModel, \"appView\");\n\n\t\t\tfnSetAppNotBusy = function() {\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\toViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t};\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded()\n\t\t\t\t.then(fnSetAppNotBusy);\n\n\t\t\t// Makes sure that master view is hidden in split app\n\t\t\t// after a new list entry has been selected.\n\t\t\toListSelector.attachListSelectionChange(function() {\n\t\t\t\tthis.byId(\"idAppControl\").hideMaster();\n\t\t\t}, this);\n\n\t\t\t// apply content density mode to root view\n\t\t//\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\n\t\t\t\n\t\t\tthis.getView().addStyleClass(utilities.getContentDensityClass());\n\t\t\tthis._oAppControl = this.byId(\"fioriContent\");\n\t\t}\n\t});\n\n});",
		"whatever/controller/tempView.controller.js": "sap.ui.define([\r\n\t\"sap/ui/core/mvc/Controller\"\r\n], function(Controller) {\r\n\t\"use strict\";\r\n\r\n\treturn Controller.extend(\"tempView.controller.tempView\", {\r\n\r\n\t\t/**\r\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\r\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonInit: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\r\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonBeforeRendering: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\r\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonAfterRendering: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonExit: function() {\r\n\t\t//\r\n\t\t//\t}\r\n\r\n\t});\r\n\r\n});",
		"whatever/controller/CreateEntity.controller.js": "sap.ui.define([\r\n\t\"whatever/controller/BaseController\",\r\n\t\"sap/ui/core/mvc/Controller\",\r\n\t\"sap/ui/core/Component\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"sap/ui/comp/odata/MetadataAnalyser\",\r\n\t\"sap/ui/comp/providers/ValueHelpProvider\",\r\n\t\"sap/ui/model/Sorter\",\r\n\t\"sap/ui/Device\",\r\n\t\"sap/ui/model/Filter\",\r\n\t\"sap/ui/model/FilterType\",\r\n\t\"sap/ui/model/FilterOperator\",\r\n\t\"sap/ui/core/ValueState\"\r\n], function(BaseController, Controller, Component, JSONModel, MetadataAnalyser, ValueHelpProvider, Sorter, Device, Filter, FilterType, FilterOperator,\r\n\tValueState) {\r\n\t\"use strict\";\r\n\r\n\r\n\t// This method returns an array that contains all entries of the array aArray that are truthy (in the same order).\r\n\t// If all entries of aArray are truthy it is returned, otherwise a new array is returned.\r\n\tfunction fnArrayFilteredTruthy(aArray) {\r\n\t\tvar aCopy = null;\r\n\t\tfor (var i = 0; i < aArray.length; i++) {\r\n\t\t\tvar oEntry = aArray[i];\r\n\t\t\tif (oEntry) {\r\n\t\t\t\tif (aCopy) {\r\n\t\t\t\t\taCopy.push(oEntry);\r\n\t\t\t\t}\r\n\t\t\t} else if (!aCopy) {\r\n\t\t\t\taCopy = aArray.slice(0, i);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn aCopy || aArray;\r\n\t}\r\n\r\n\r\n\treturn BaseController.extend(\"whatever.controller.CreateEntity\", {\r\n\r\n\t\tonInit: function() {\r\n\t\t\t// Gets the application component and the data operation helper instance\r\n\t\t\tthis._oView = this.getView();\r\n\t\t\tthis._initViewPropertiesModel();\r\n\t\t\tvar oComponent = this.getOwnerComponent();\r\n\t\t\tthis._oCategory = this.byId(\"categoryBox\");\r\n\t\t\tthis._oSubcategory = this.byId(\"subcategoryBox\");\r\n\t\t\tthis._aMandatoryFields = this._getMandatoryFields();\r\n\t\t\tthis._aInputFields = this._aMandatoryFields.concat(this._getNonMandatoryInputFields());\r\n\t\t\t\r\n\t\t//\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\r\n\t\t\tthis.setModel(this._oView, \"editModel\");\r\n\t//\t\tthis._oODataModel =\toComponent().getModel();\r\n\t//\t\tthis._oResourceBundle = this.getResourceBundle();\r\n\t\r\n\r\n\t\t//\tthis._initSubViewImageUpload();\r\n\r\n\t\t\tvar oModel = oComponent.getModel();\r\n\t\t\t// This facilitates the value help generated from annotations only\r\n\t\t\toModel.attachMetadataLoaded(function() {\r\n\t\t\t\tvar oInput = this.byId(\"supplierInput\"),\r\n\t\t\t\t\toMetadataAnalyzer = new MetadataAnalyser(oModel),\r\n\t\t\t\t\tsField = \"SupplierName\",\r\n\t\t\t\t\tmConfig = oComponent.getMetadata().getConfig(),\r\n\t\t\t\t\tsServiceName = mConfig.serviceConfig.name,\r\n\t\t\t\t\tsAnnotationPath = sServiceName + \".ProductDraft/\" + sField,\r\n\t\t\t\t\toValueListAnnotations = oMetadataAnalyzer.getValueListAnnotation(sAnnotationPath);\r\n\r\n\t\t\t\tif (oInput) {\r\n\t\t\t\t\t// This is created for side effects Search Help Dialog\r\n\t\t\t\t\t/* eslint-disable */\r\n\t\t\t\t\tnew ValueHelpProvider({\r\n\t\t\t\t\t\tannotation: oValueListAnnotations.primaryValueListAnnotation,\r\n\t\t\t\t\t\tadditionalAnnotations: oValueListAnnotations.additionalAnnotations,\r\n\t\t\t\t\t\tcontrol: oInput,\r\n\t\t\t\t\t\tmodel: oModel,\r\n\t\t\t\t\t\tpreventInitialDataFetchInValueHelpDialog: true,\r\n\t\t\t\t\t\tsupportMultiSelect: false,\r\n\t\t\t\t\t\tsupportRanges: false,\r\n\t\t\t\t\t\tfieldName: sField,\r\n\t\t\t\t\t\ttitle: sField\r\n\t\t\t\t\t});\r\n\t\t\t\t\t/* eslint-enable */\r\n\t\t\t\t\toInput.setShowValueHelp(true);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\t\r\n\t\t\r\n\t\t_initViewPropertiesModel: function() {\r\n\t\t\t// The model created here is used to set values or view element properties that cannot be bound\r\n\t\t\t// directly to the OData service. Setting view element attributes by binding them to a model is preferable to the\r\n\t\t\t// alternative of getting each view element by its ID and setting the values directly because a JSon model is more\r\n\t\t\t// robust if the customer removes view elements (see extensibility).\r\n\t\t\tthis._oViewProperties = new JSONModel({\r\n\t\t\t\tdataLoaded: false\r\n\t\t\t});\r\n\t\t\tthis._oView.setModel(this._oViewProperties, \"viewProperties\");\r\n\t\t},\r\n\t\t\r\n\t\t_getMandatoryFields: function() {\r\n\t\t\treturn fnArrayFilteredTruthy([this.byId(\"productNameInput\"), this.byId(\"priceInput\"), this.byId(\"currencyBox\"),\r\n\t\t\t\tthis._oCategory, this._oSubcategory, this.byId(\"descriptionArea\"),\r\n\t\t\t\tthis.byId(\"supplierInput\"), this.byId(\"unitOfMeasureBox\")\r\n\t\t\t]);\r\n\t\t},\r\n\r\n\t\t_getNonMandatoryInputFields: function() {\r\n\t\t\treturn fnArrayFilteredTruthy([this.byId(\"lengthInput\"), this.byId(\"widthInput\"), this.byId(\"heightInput\"), this.byId(\"weightInput\")]);\r\n\t\t},\r\n\t\t\r\n\r\n\r\n\t\tleave: function() {\r\n\t\t\tthis._oView.unbindElement();\r\n\t\t},\r\n\t\t\r\n\t\t// --- Input fields\r\n\r\n\t\tonNumberChange: function(oEvent) {\r\n\t\t\t// If a number field is empty, an error occurs in the backend.\r\n\t\t\t// So this sets a missing number to \"0\".\r\n\t\t\tvar oField = oEvent.getSource(),\r\n\t\t\t\tsNumber = oField.getValue();\r\n\t\t\tif (sNumber === \"\") {\r\n\t\t\t\toField.setValue(\"0\");\r\n\t\t\t}\r\n\t\t\tthis._fieldChange(oField);\r\n\r\n\t\t},\r\n\r\n\t\tonCategoryChange: function(oEvent) {\r\n\t\t\t// Do not use submitChanges because the subcategory determines the category and both\r\n\t\t\t// end up being blank. Only use submitChanges after the subcategory has been changed.\r\n\t\t\toEvent.getSource().setValueState(ValueState.None);\r\n\t\t\t//alert(this._oView.getBindingContext());\r\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\r\n\t\t\talert(oViewModel);\r\n\t\t\t//this._setCategoryFilter(oViewModel.getBindingContext());\r\n\t\t\t//this._setCategoryFilter(this._oView.getBindingContext());\r\n\t\t},\r\n\r\n\t\tonInputChange: function(oEvent) {\r\n\t\t\t// Whenever the value of an input field is changed, the system must\r\n\t\t\t// update the product draft. For most of the fields, no specific\r\n\t\t\t// processing is required on the update of the product draft. onInputChange is the\r\n\t\t\t// change event defined in the XML view for such fields.\r\n\t\t\tvar oField = oEvent.getSource();\r\n\t\t\t// Workaround to ensure that both the supplier Id and Name are updated in the model before the\r\n\t\t\t// draft is updated, otherwise only the Supplier Name is saved to the draft and Supplier Id is lost\r\n\t\t\tsetTimeout(function() {\r\n\t\t\t\tthis._fieldChange(oField);\r\n\t\t\t}.bind(this), 0);\r\n\t\t\t\t\t\talert(\"input changed\");\r\n\t\t},\r\n\r\n\t\tonSubcategoryChange: function(oEvent) {\r\n\t\t\tvar sValue = this._oSubcategory.getValue();\r\n\t\t\tif (!sValue.trim()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (this._oCategory) {\r\n\t\t\t\tthis._oCategory.setValueState(ValueState.None);\r\n\t\t\t\tvar oSelectedItem = oEvent.getParameter(\"selectedItem\"),\r\n\t\t\t\t\toBindingContext = oSelectedItem.getBindingContext(),\r\n\t\t\t\t\tsMainCategory = oBindingContext.getProperty(\"MainCategoryId\");\r\n\t\t\t\tif (sMainCategory !== this._oCategory.getValue()) {\r\n\t\t\t\t\tthis._oCategory.setValue(sMainCategory);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._fieldChange(this._oSubcategory);\r\n\t\t},\r\n\r\n\t\tonSelectChange: function() {\r\n\t\t\t// Collect input controls.\r\n\t\t\t// Additional method for change event on SelectChanges because there is currently\r\n\t\t\t// no value status for a select field.\r\n\t\t\tthis._setDirty();\r\n\t\t\tthis._oHelper.saveSelectProductDraft();\r\n\t\t},\r\n\t\t\r\n\t\t//This method has been defined in the XML view and is required by UI5 to call\r\n\t\t// the Suggestions \"type ahead\" function\r\n\t\tsuggestMethod: function(oEvent) {\r\n\t\t\tsap.m.InputODataSuggestProvider.suggest(oEvent);\r\n\t\t},\r\n\r\n\t\t// Values states if set are not automatically removed from the view.  For example, if there\r\n\t\t// are missing mandatory fields and the user presses \"save\", these fields are set to value state\r\n\t\t// error.  If the user then presses \"cancel\" and selects another product to edit, the values states\r\n\t\t// must be removed, otherwise the value states appear on the next product edit.\r\n\t\t_resetValueStates: function() {\r\n\t\t\tjQuery.each(this._aInputFields, function(i, input) {\r\n\t\t\t\tinput.setValueState(ValueState.None);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_fieldWithErrorState: function() {\r\n\t\t\treturn this._aInputFields.some(function(input) {\r\n\t\t\t\treturn (input.getValueState() === ValueState.Error);\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_fieldChange: function(oControl) {\r\n\t\t\t// Handler for a changed field that needs to be written to the draft.  This allows\r\n\t\t\t// specific processing for the \"Change\" event on the input fields, such as for numbers\r\n\t\t\t// to set empty to \"0\".\r\n\t\t\tthis._setDirty();\r\n\t\t\t// Removes previous error state\r\n\t\t\toControl.setValueState(ValueState.None);\r\n\t\t\t// Callback function in the event that saving draft is unsuccessful\r\n\t\t\tvar fnSubmitDraftSuccess = function(sMessage) {\r\n\t\t\t\tif (sMessage && oControl) {\r\n\t\t\t\t\toControl.setValueState(\"Error\");\r\n\t\t\t\t\toControl.setValueStateText(sMessage);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tthis._oHelper.saveProductDraft(fnSubmitDraftSuccess);\r\n\t\t},\r\n\r\n\t\t// Set the empty mandatory fields to Value State Error\r\n\t\t// Return whether at least one mandatory field is still empty\r\n\t\t_checkAndMarkEmptyMandatoryFields: function() {\r\n\t\t\tvar bErrors = false;\r\n\t\t\t// Check that inputs are not empty or space.\r\n\t\t\t// This does not happen during data binding because this is only triggered by changes.\r\n\t\t\t// Note that this loop must not stop with the first found error, since for all mandatory fields the value state must be updated.\r\n\t\t\tjQuery.each(this._aMandatoryFields, function(i, input) {\r\n\t\t\t\tif (!input.getValue() || input.getValue().trim() === \"\") {\r\n\t\t\t\t\tbErrors = true;\r\n\t\t\t\t\tinput.setValueState(ValueState.Error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn bErrors;\r\n\t\t},\r\n\r\n\t\t_setCategoryFilter: function(oBindingContext) {\r\n\t\t\tif (this._oSubcategory) {\r\n\t\t\t\talert(oBindingContext);\r\n\t\t\t\talert(oBindingContext.getProperty(\"MainCategoryId\"));\r\n\t\t\t\tvar sMainCatgId = oBindingContext.getProperty(\"MainCategoryId\"),\r\n\t\t\t\tsSubCatgId = oBindingContext.getProperty(\"SubCategoryId\"),\r\n\t\t\t\t\taFilters = sMainCatgId ? [new Filter(\"MainCategoryName\", FilterOperator.StartsWith, sMainCatgId)] : [],\r\n\t\t\t\t\toBinding = this._oSubcategory.getBinding(\"items\");\r\n\t\t\t\tif (sMainCatgId) {\r\n\t\t\t\t\toBinding.attachEventOnce(\"change\", function() {\r\n\t\t\t\t\t\tvar aBindings = oBinding.getContexts(),\r\n\t\t\t\t\t\t\tbIsValueValid = aBindings.some(function(oEntry) {\r\n\t\t\t\t\t\t\t\treturn sSubCatgId === oEntry.getProperty(\"Id\");\r\n\t\t\t\t\t\t\t}).bind(this);\r\n\t\t\t\t\t\tif (!bIsValueValid) {\r\n\t\t\t\t\t\t\tthis._oSubcategory.setValue(\" \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._oSubcategory.setValue(\" \");\r\n\t\t\t\t}\r\n\t\t\t\toBinding.filter(aFilters, FilterType.Application);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setDirty: function() {\r\n\t\t\tthis._oApplicationProperties.setProperty(\"/isDirty\", true);\r\n\t\t},\r\n\t\t\r\n\t\t\t\t// --- Event handlers attached declaratively\r\n\r\n\t\tonSavePressed: function() {\r\n\t\t\tif (!this._checkAndMarkEmptyMandatoryFields() && !this._fieldWithErrorState()) {\r\n\t\t\t\tvar fnDraftSaved = function(oControl, oResponse) {\r\n\t\t\t\t\t\t// When the batch of requests in oData V2 is successfully sent to the backend,\r\n\t\t\t\t\t\t// the mParameters.success in submitChanges is called. Errors relating to the\r\n\t\t\t\t\t\t// requests within the batch are not indicated separately and therefore the system must\r\n\t\t\t\t\t\t// check the requests contained in the batch for errors based on the request response.\r\n\t\t\t\t\t\t// Makes the assumption that the error returned relates to the field that has been\r\n\t\t\t\t\t\t// changed. This is not always the case and errors are shown in valueStateText\r\n\t\t\t\t\t\t// for the field that triggered the save of the draft.\r\n\t\t\t\t\t\tfor (var i = 0; i < oResponse.__batchResponses.length; i++) {\r\n\t\t\t\t\t\t\tif (oResponse.__batchResponses[i].response) {\r\n\t\t\t\t\t\t\t\tif (jQuery.sap.startsWith(oResponse.__batchResponses[i].response.body, \"{\\\"error\\\":\")) {\r\n\t\t\t\t\t\t\t\t\tvar oErrModel = new JSONModel();\r\n\t\t\t\t\t\t\t\t\toErrModel.setJSON(oResponse.__batchResponses[i].response.body);\r\n\t\t\t\t\t\t\t\t\tvar sMessage = oErrModel.getProperty(\"/error/message/value\");\r\n\t\t\t\t\t\t\t\t\tif (oControl) {\r\n\t\t\t\t\t\t\t\t\t\toControl.setValueState(\"Error\");\r\n\t\t\t\t\t\t\t\t\t\toControl.setValueStateText(sMessage);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t// Just take the first error message found\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tfnAfterActivation = function(oProductData) {\r\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/masterBusyIndicatorDelay\", 0);\r\n\t\t\t\t\t\tthis._oApplicationController.showProductDetailPage(oProductData.Id, true);\r\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isBusySaving\", false);\r\n\t\t\t\t\t\tvar sMessage = this._oResourceBundle.getText(\"ymsg.saveText\", oProductData.Name);\r\n\t\t\t\t\t\tsap.ui.require([\"sap/m/MessageToast\"], function(MessageToast) {\r\n\t\t\t\t\t\t\tMessageToast.show(sMessage);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}.bind(this);\r\n\t\t\t\tthis._oHelper.activateProduct(fnDraftSaved, fnAfterActivation);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonCancelPressed: function() {\r\n\t\t\tvar oDraft = this._oView.getBindingContext().getObject(),\r\n\t\t\t\tfnNavToProductDetail = function() {\r\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/detailBusyIndicatorDelay\", null);\r\n\t\t\t\t\t// The system must distinguish between CANCEL chosen in EDIT mode and CANCEL chosen in ADD mode\r\n\t\t\t\t\t// because Cancel Edit navigates to display of that product and Cancel Add to the previously\r\n\t\t\t\t\t// selected product\r\n\t\t\t\t\tvar bIsNew = oDraft.IsNewProduct,\r\n\t\t\t\t\t\tsProductId = bIsNew ? (!Device.system.phone && this._oApplicationProperties.getProperty(\"/lastDisplay\")) : oDraft.ProductId;\r\n\t\t\t\t\tif (sProductId) {\r\n\t\t\t\t\t\tthis._oApplicationController.showProductDetailPage(sProductId);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._oApplicationController.navToMaster();\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this);\r\n\t\t\tthis._deleteProductDraft(fnNavToProductDetail);\r\n\t\t},\r\n\r\n\t\tonSharePressed: function(oEvent) {\r\n\t\t\tthis._oSubControllerForShare.openDialog(oEvent);\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n});",
		"whatever/controller/BaseController.js": "/*global history */\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/routing/History\"\n], function(Controller, History) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"whatever.controller.BaseController\", {\n\t\t/**\n\t\t * Convenience method for accessing the router in every controller of the application.\n\t\t * @public\n\t\t * @returns {sap.ui.core.routing.Router} the router for this component\n\t\t */\n\t\tgetRouter: function() {\n\t\t\treturn this.getOwnerComponent().getRouter();\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the view model by name in every controller of the application.\n\t\t * @public\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.model.Model} the model instance\n\t\t */\n\t\tgetModel: function(sName) {\n\t\t\treturn this.getView().getModel(sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for setting the view model in every controller of the application.\n\t\t * @public\n\t\t * @param {sap.ui.model.Model} oModel the model instance\n\t\t * @param {string} sName the model name\n\t\t * @returns {sap.ui.mvc.View} the view instance\n\t\t */\n\t\tsetModel: function(oModel, sName) {\n\t\t\treturn this.getView().setModel(oModel, sName);\n\t\t},\n\n\t\t/**\n\t\t * Convenience method for getting the resource bundle.\n\t\t * @public\n\t\t * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component\n\t\t */\n\t\tgetResourceBundle: function() {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n\t\t},\n\n\t\t/**\n\t\t * Event handler  for navigating back.\n\t\t * It checks if there is a history entry. If yes, history.go(-1) will happen.\n\t\t * If not, it will replace the current entry of the browser history with the master route.\n\t\t * @public\n\t\t */\n\t\tonNavBack: function() {\n\t\t\tvar sPreviousHash = History.getInstance().getPreviousHash();\n\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\n\t\t\t\thistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Otherwise we go backwards with a forward history\n\t\t\t\tvar bReplace = true;\n\t\t\t\tthis.getRouter().navTo(\"master\", {}, bReplace);\n\t\t\t}\n\t\t}\n\n\t});\n\n});",
		"whatever/controller/Application.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/Device\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/odata/v2/ODataModel\",\n\t\"./NavigationManager\",\n\t\"./messages\",\n\t\"./utilities\",\n\t\"nw/epm/refapps/ext/prod/manage/model/Products\",\n\t\"nw/epm/refapps/ext/prod/manage/model/formatter\"\n], function(Object, Device, JSONModel, ODataModel, NavigationManager, messages, utilities, Products, formatter) {\n\t\"use strict\";\n\n\tfunction fnInitBusyHandling(oApplicationProperties) {\n\t\t// This function is called in the initialization phase. It ensures that the busy state of the app is set correctly.\n\t\t// oApplicationProperties is the global application model (see below). This model contains a property isAppBusy\n\t\t// which is declaratively bound to the busy state of the app (see view nw.epm.refapps.ext.prod.manage.view.App).\n\t\t// Actually there are several reasons which make the app busy. All of them can be expressed via properties handled\n\t\t// by the global application model. E.g. the app should be busy when isBusyDeleting is true.\n\t\t// Therefore, in this function we register for changes of any of those properties influencing the busy state.   \n\t\tvar mBusyReasons = { // A map of the global properties influencing the busy state onto the value which makes the app busy\n\t\t\t\tisBusyDeleting: true,\n\t\t\t\tisBusyCreatingDraft: true,\n\t\t\t\tisBusySaving: true,\n\t\t\t\tmetaDataLoadState: 0,\n\t\t\t\tlostDraftReadState: 0\n\t\t\t},\n\t\t\tfnRefreshBusyState = function() { // function which is called when a property influencing the busy state is modified\n\t\t\t\tvar bIsBusy = false; // information whether app should be busy now. First assumption: app is not busy\n\t\t\t\tfor (var sProp in mBusyReasons) { // check whether we find any reason for being busy\n\t\t\t\t\tvar vExpected = mBusyReasons[sProp];\n\t\t\t\t\tvar vValue = oApplicationProperties.getProperty(\"/\" + sProp);\n\t\t\t\t\tif (vExpected === vValue) { // ok, the app is busy\n\t\t\t\t\t\tbIsBusy = true;\n\t\t\t\t\t\t// We set the app to busy now. When this busy state ends we will still\n\t\t\t\t\t\t// have to re determine the detail area. Since we want to avoid\n\t\t\t\t\t\t// a flickering of busy indicators we ensure that the busy indicator\n\t\t\t\t\t\t// of the detail area becomes busy immediately.\n\t\t\t\t\t\toApplicationProperties.setProperty(\"/detailBusyIndicatorDelay\", 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toApplicationProperties.setProperty(\"/isAppBusy\", bIsBusy);\n\t\t\t};\n\t\t// Now register fnRefrechBusyState to changes of all properties contained in mBusyReasons\n\t\tfor (var sProperty in mBusyReasons) {\n\t\t\tvar oBinding = oApplicationProperties.bindProperty(\"/\" + sProperty);\n\t\t\toBinding.attachChange(fnRefreshBusyState);\n\t\t}\n\t}\n\n\treturn Object.extend(\"nw.epm.refapps.ext.prod.manage.controller.Application\", {\n\t\t// This class serves as controller for the whole App. It is a singleton object which is initialized by the Component.\n\t\t// Since the Component exposes a reference to this singleton object all controllers have access to it and can use its public methods.\n\t\t// On the other hand the S2 and the S3 view register at this singelton on startup, such that it can call public methods of these controllers\n\t\t// if necessary.\n\n\t\t// --- the following attributes are initialized during startup and not changed afterwards\n\t\t// _oComponent: the Component (nw.epm.refapps.ext.prod.manage.Component)\n\t\t// _mRoutes: Access the routenames (see Component)\n\t\t// _oResourceBundle: the resource bundle used by this app\n\t\t// _oModel: the OData model used by this App\n\t\t// _oApplicationProperties: a JSON model used to share global state between the classes used in this App\n\t\t// it possesses the following attributes:\n\t\t// applicationController - this instance\n\t\t// serviceUrl            - the url of the OData service used by this app\n\t\t// isMultiSelect         - is the App in multi select mode\n\t\t// metaDataLoadState     - 0: meta data loading, 1: meta data loading was successful, -1 metadata loading failed\n\t\t// lostDraftReadState    - 0: reading lost draft, 1: lost draft info read successfully, -1 none of them\n\t\t// isBusyDeleting, isBusyCreatingDraft, isBusySaving\n\t\t//                       - busy states of the app\n\t\t// isAppBusy             - information whether the app as a whole is busy. Its state is dervied from\n\t\t//                         other states (see fnInitBusyHandling)\n\t\t// detailBusyIndicatorDelay, masterBusyIndicatorDelay\n\t\t//                       - busy delays for master and detail view. They are either 0 (no delay) or null (default delay)\n\t\t// noEditMode            - is the App in display mode,\n\t\t// productId             - if this attribute is truthy it contains the id of the product to be displayed currently\n\t\t// preferredIds          - this attribute is only evaluated when productId is faulty. In this case it contains an\n\t\t//                         array of product ids. The first of these ids corresponding to an item in the master list\n\t\t//                         will be displayed\n\t\t// isDirty               - flag indicating whether the current draft is dirty. Only relevant in edit scenarios.\n\t\t// lastDisplay           - id of the last product that was shown in display screen\n\t\t// isListLoading         - information whether the master list is currently loading\n\t\t// listNoDataText        - the noDataText currently applicable for the master list\n\t\t// emptyText             - text to be shown on the empty page\n\t\t// _oNavigationManager: instance of nw.epm.refapps.ext.prod.manage.controller.NavigationManager responsible for handling navigation\n\t\t// _oDataHelper: instance of nw.epm.refapps.ext.prod.manage.model.Products used to perform explicit backend calls\n\t\t// _oMasterController: controller of nw.epm.refapps.ext.prod.manage.view.S2_ProductMaster\n\t\t// _oOnMetaData: an instance which possesses arrays onSuccess and onFailure as members. The elements of these arrays are functions, \n\t\t// which will be executed according to whether the loading of the metadata was successful or failure.\n\t\t// As soon as the metadata have been loaded successfully the attribute will not be used anymore (and thus set to null).\n\n\t\t// --- Lifecycle methods\n\n\t\t// - Methods called during application startup. Note that the methods will be called in the following\n\t\t//   order: constructor, init, registerMaster, onRoutePatternMatched (of NavigationManager), onMetadataLoaded.\n\t\t//   The point in time when registerDetail is called depends on the route which is used to start the App.\n\n\t\tconstructor: function(oComponent, mRoutes) {\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._mRoutes = mRoutes;\n\t\t},\n\n\t\tinit: function(sServiceUrl) {\n\t\t\tthis._oMainView = this._oComponent.getAggregation(\"rootControl\");\n\n\t\t\tthis._oOnMetaData = {\n\t\t\t\tonSuccess: [],\n\t\t\t\tonFailure: []\n\t\t\t};\n\t\t\tvar oODataModel = this._oComponent.getModel();\n\t\t\toODataModel.attachMetadataLoaded(this.onMetadataLoaded, this);\n\t\t\toODataModel.attachMetadataFailed(this.onMetadataFailed, this);\n\n\t\t\tthis._oApplicationProperties = new JSONModel({\n\t\t\t\tserviceUrl: sServiceUrl,\n\t\t\t\tmetaDataLoadState: 0,\n\t\t\t\tlostDraftReadState: -1,\n\t\t\t\tisBusyDeleting: false,\n\t\t\t\tisBusyCreatingDraft: false,\n\t\t\t\tisBusySaving: false,\n\t\t\t\tisAppBusy: true,\n\t\t\t\tdetailBusyIndicatorDelay: 0,\n\t\t\t\tmasterBusyIndicatorDelay: 0,\n\t\t\t\tapplicationController: this,\n\t\t\t\tisMultiSelect: false,\n\t\t\t\tnoEditMode: true,\n\t\t\t\tpreferredIds: [],\n\t\t\t\tisDirty: false,\n\t\t\t\tlastDisplay: null,\n\t\t\t\tisListLoading: false,\n\t\t\t\tlistNoDataText: \" \"\n\t\t\t});\n\t\t\tthis._oComponent.setModel(this._oApplicationProperties, \"appProperties\");\n\t\t\tfnInitBusyHandling(this._oApplicationProperties);\n\t\t\tthis._oDataHelper = new Products(this._oComponent, this._oMainView);\n\n\t\t\tvar oRouter = this._oComponent.getRouter();\n\t\t\tthis._oNavigationManager = new NavigationManager(oRouter, this._oApplicationProperties, this._mRoutes, this._oComponent.getModel(\n\t\t\t\t\"i18n\").getResourceBundle());\n\t\t\tthis._oNavigationManager.init();\n\t\t\tthis._extractStartupParameters(oRouter);\n\t\t},\n\n\t\t_extractStartupParameters: function(oRouter) {\n\t\t\t// handle the case that App was reached via Cross App navigation\n\t\t\tvar oComponentData = this._oComponent.getComponentData();\n\t\t\tif (oComponentData && oComponentData.startupParameters && jQuery.isArray(oComponentData.startupParameters.Product) &&\n\t\t\t\toComponentData.startupParameters.Product.length > 0) {\n\t\t\t\tvar sUrl = oRouter.getURL(this._mRoutes.DETAIL, {\n\t\t\t\t\tproductID: oComponentData.startupParameters.Product[0]\n\t\t\t\t});\n\t\t\t\tif (sUrl) {\n\t\t\t\t\tsap.ui.require([\"sap/ui/core/routing/HashChanger\"], function(HashChanger) {\n\t\t\t\t\t\tvar oHashChanger = HashChanger.getInstance();\n\t\t\t\t\t\toHashChanger.replaceHash(sUrl);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tregisterMaster: function(oMasterController) {\n\t\t\t// This method is called in onInit() of the S2-view\n\t\t\tthis._oMasterController = oMasterController;\n\t\t\tthis._oNavigationManager.registerMaster(oMasterController);\n\t\t},\n\n\t\tregisterDetail: function(oDetailController) {\n\t\t\t// This method is called in onInit() of the S3-view\n\t\t\tthis._oNavigationManager.registerDetail(oDetailController);\n\t\t},\n\n\t\tonMetadataLoaded: function() {\n\t\t\t// In normal scenarios this method is called at the end of the startup process. However, in cases that initial loading of\n\t\t\t// metadata fails, this method may be called later. It is registered in init().\n\t\t\tthis._checkForLostDraft();\n\t\t\tthis._oApplicationProperties.setProperty(\"/metaDataLoadState\", 1);\n\t\t\tthis._oApplicationProperties.setProperty(\"/isListLoading\", true);\n\t\t\tfor (var i = 0; i < this._oOnMetaData.onSuccess.length; i++) {\n\t\t\t\tthis._oOnMetaData.onSuccess[i]();\n\t\t\t}\n\t\t\tthis._oOnMetaData = null;\n\t\t},\n\n\t\tonMetadataFailed: function() {\n\t\t\tthis._oApplicationProperties.setProperty(\"/metaDataLoadState\", -1);\n\t\t\tfor (var i = 0; i < this._oOnMetaData.onFailure.length; i++) {\n\t\t\t\tthis._oOnMetaData.onFailure[i]();\n\t\t\t}\n\t\t\tthis._oOnMetaData = {\n\t\t\t\tonSuccess: [],\n\t\t\t\tonFailure: []\n\t\t\t};\n\t\t},\n\n\t\t// - Navigation methods are forwarded to the NavigationManager\n\n\t\tnavBackToMasterPageInPhone: function() {\n\t\t\treturn this._oNavigationManager.navBackToMasterPageInPhone();\n\t\t},\n\n\t\tshowProductDetailPage: function(sProductId, bListRefresh) {\n\t\t\t// This method navigates to the display page for the specified product id. Note that this method must only\n\t\t\t// be called when either no draft exists (for the current user), or the deletion of this draft has been triggered already,\n\t\t\t// or the lookup for lost draft has failed.\n\t\t\tthis._oNavigationManager.showProductDetailPage(sProductId, bListRefresh);\n\t\t},\n\n\t\tnavToMaster: function(sPrefereredId) {\n\t\t\t// This method navigates to the master route. sPreferredId is an optional parameter that may contain the id of a\n\t\t\t// product that (on non-phone devices) is preferably shown (provided it is in the master list). Prerequisites for\n\t\t\t// calling this method are as for showProductDetailPage.\n\t\t\tthis._oNavigationManager.navToMaster(sPrefereredId);\n\t\t},\n\n\t\tnavToProductEditPage: function(sDraftId) {\n\t\t\t// This method navigates to the edit page for the (only existing) draft for this user. Note that this method must only\n\t\t\t// be called when this draft exists and its id is either passed as parameter sDraftId or is already contained in attribute\n\t\t\t// productId of the AppModel.\n\t\t\tthis._oNavigationManager.navToProductEditPage(sDraftId);\n\t\t},\n\n\t\tnavToEmptyPage: function(sText, bResetUrl) {\n\t\t\t// This method navigates to the empty page in detail area. Prerequisites for\n\t\t\t// calling this method are as for showProductDetailPage.\n\t\t\t// sText is the text to be shown on the empty page\n\t\t\tthis._oNavigationManager.navToEmptyPage(sText, bResetUrl);\n\t\t},\n\n\t\tnavBack: function(bFromDetail) {\n\t\t\tthis._oNavigationManager.navBack(bFromDetail, this._oDataHelper);\n\t\t},\n\n\t\t// --- Methods dealing with lost drafts\n\n\t\t_checkForLostDraft: function() {\n\t\t\t// This method triggers the check for a lost draft. It is called directly after the metadata have been loaded.\n\t\t\t// If the backend call fails, this method will be called on every list refresh until it succeeds the first time.\n\t\t\t// Note that performing this logic in onMetaDataLoaded has two advantages:\n\t\t\t// - the types of the oData response for the lost draft are set correctly\n\t\t\t// - the call will implicitly be batched with the first call to determine the master list\n\t\t\tthis._oApplicationProperties.setProperty(\"/lostDraftReadState\", 0);\n\t\t\tvar fnError = function(oResponse) {\n\t\t\t\tthis._oApplicationProperties.setProperty(\"/lostDraftReadState\", -1);\n\t\t\t\tmessages.showErrorMessage(oResponse, this._oMainView);\n\t\t\t};\n\t\t\t// delegate oData call to the helper object\n\t\t\tthis._oDataHelper.readProductDraft(this.handleLostDraft.bind(this), fnError.bind(this));\n\t\t},\n\n\t\thandleLostDraft: function(sDraftId, oProductDraft) {\n\t\t\t// This method will be called when we have successfully retrieved the information on lost drafts.\n\t\t\t// If a lost draft exists its id is passed in parameter sDraftId and the full object is passed in oProductDraft.\n\t\t\t// Otherwise both parameters are faulty.\n\t\t\t// Note that onRoutePatdaternMatched has been executed at this point in time.\n\t\t\tthis._oApplicationProperties.setProperty(\"/lostDraftReadState\", 1);\n\t\t\tif (sDraftId) { // a lost draft exists\n\t\t\t\tvar sLastId = this._oApplicationProperties.getProperty(\"/productId\"); // store the id of the product currently displayed (if there is one)\n\t\t\t\tif (sLastId !== sDraftId && !oProductDraft.IsDirty) { // if the lost draft is not dirty and it is not the current one\n\t\t\t\t\tthis._oDataHelper.deleteDraft(sDraftId); // delete it without notice\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.navToProductEditPage(sDraftId); // the lost draft is either dirty or belonging to the product currently displayed -> go to its edit page\n\t\t\t\tif (sLastId === sDraftId) { // if the user was working on this product anyway we are done\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isDirty\", oProductDraft.IsDirty); // but update the global isDirty-property first\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// User has a lost (dirty) draft belonging to another object than he is currently looking at.\n\t\t\t\t// -> he must either edit this draft or revert it\n\t\t\t\tvar oDialog,\n\t\t\t\t\tfnDiscarded = function() { // this method is called when the user decides to revert the draft\n\t\t\t\t\t\toDialog.close();\n\t\t\t\t\t\tthis._oDataHelper.deleteDraft(sDraftId); // delete the draft\n\t\t\t\t\t\tif (sLastId) { // preferably go back to the product we were working on before\n\t\t\t\t\t\t\tthis.showProductDetailPage(sLastId);\n\t\t\t\t\t\t} else { // Otherwise we prefer to display the product we had in edit screen, if possible\n\t\t\t\t\t\t\tthis.navToMaster(!oProductDraft.IsNew && sDraftId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\tfnResumed = function() {\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isDirty\", true); // the draft is already dirty\n\t\t\t\t\t\toDialog.close(); // when the user wants to resume the draft, we are already on the right screen\n\t\t\t\t\t}.bind(this);\n\n\t\t\t\toDialog = sap.ui.xmlfragment(\"nw.epm.refapps.ext.prod.manage.view.LostDraftDialog\", {\n\t\t\t\t\toResourceBundle: this._oComponent.getModel(\"i18n\").getResourceBundle(),\n\t\t\t\t\tformatter: formatter,\n\t\t\t\t\tonDiscard: fnDiscarded,\n\t\t\t\t\tonResume: fnResumed\n\t\t\t\t});\n\t\t\t\tutilities.attachControlToView(this._oMainView, oDialog);\n\t\t\t\tvar oDraftModel = new JSONModel({\n\t\t\t\t\tproductDraft: oProductDraft\n\t\t\t\t});\n\t\t\t\toDialog.setModel(oDraftModel, \"draft\");\n\t\t\t\toDialog.open();\n\t\t\t}\n\t\t},\n\n\t\t// --- Methods dealing with deletion of products\n\n\t\tdeleteListener: function(bBeforeDelete, aPaths) {\n\t\t\t// This function deals with deleting of products.\n\t\t\t// It must be called twice for every delete operations performed on products (not for other entities like product drafts).\n\t\t\t// The first time it is called is before the delete operation is performed.\n\t\t\t// The second time is, after the delete operation has been performed successfully (at least partially)\n\t\t\t// -bBeforeDelete denotes the information which case applies\n\t\t\t// -aPaths is the array of product ids to be deleted\n\t\t\tif (bBeforeDelete) {\n\t\t\t\tthis._beforeDelete(aPaths);\n\t\t\t} else {\n\t\t\t\tthis._afterDelete();\n\t\t\t}\n\t\t},\n\n\t\t_beforeDelete: function(aPaths) {\n\t\t\t// called immediately before products are deleted.\n\t\t\t// The task of this method is to predefine the object which should be displayed after the deletion process.\n\t\t\t// This is done by setting the attributes productId and preferredIds ain the AppModel.\n\t\t\t// Thereby, the logic is as follows: If the item that is currently displayed is not to be deleted it should stay the the seletced one.\n\t\t\t// Otherwise, we build a list of preferred entries. Thereby, we prefer to take the list items being currently behind the current item.\n\t\t\t// As a second preference we take those items in front of the present one (starting with the last).\n\t\t\t// Note that we also consider items which shall be deleted, as the deletion may fail partially.\n\t\t\tvar sCurrentId = !Device.system.phone && this._oApplicationProperties.getProperty(\"/productId\");\n\t\t\tthis._oApplicationProperties.setProperty(\"/productId\", null);\n\t\t\tif (sCurrentId) {\n\t\t\t\tvar bCurrentWillBeDeleted = false,\n\t\t\t\t\tsCurrentPath = this._oDataHelper.getPathForProductId(sCurrentId);\n\t\t\t\tfor (var i = 0; !bCurrentWillBeDeleted && i < aPaths.length; i++) {\n\t\t\t\t\tbCurrentWillBeDeleted = sCurrentPath === aPaths[i];\n\t\t\t\t}\n\t\t\t\tif (!bCurrentWillBeDeleted) {\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/productId\", sCurrentId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._oMasterController) {\n\t\t\t\tthis._oMasterController.prepareForDelete(sCurrentId);\n\t\t\t}\n\t\t},\n\n\t\t// Called immediately after a successfull deletion of products has taken place.\n\t\t_afterDelete: function() {\n\t\t\tthis.navBackToMasterPageInPhone();\n\t\t\tif (!this._oApplicationProperties.getProperty(\"/isListLoading\")) {\n\t\t\t\tthis._oMasterController.findItem();\n\t\t\t}\n\t\t},\n\n\t\t// --- Methods to be called by the controllers\n\n\t\tgetODataHelper: function() {\n\t\t\t// Returns the (singleton) helper for handling oData operations in this application\n\t\t\treturn this._oDataHelper;\n\t\t},\n\n\t\t// This method can be called when another action depends on the fact that the metadata have been loaded successfully.\n\t\t// More precisely the contract of this method is as follows:\n\t\t// - when the metadata have already been loaded successfully fnMetadataLoaded is executed immediately.\n\t\t//   Moreover in this case the check for lost draft would be triggered once more if it has failed before\n\t\t// - In case the metadata have not yet been loaded successfully, it is once more tried to load the metadata.\n\t\t//   fnMetadataLoaded will be called when the metadata have been loaded succesfully, whereas fnNoMetadata will\n\t\t//   be called when the metadata loading has failed.\n\t\t// - When the method is called while the metadata are still loading, fnMetaDataLoaded and fnNoMetadata will override\n\t\t//   functions which jhave been provided by previous calls. However, this cannot happen, since the App is busy\n\t\t//   while metadata are loading.\n\t\twhenMetadataLoaded: function(fnMetadataLoaded, fnNoMetadata) {\n\t\t\tvar iMetadataLoadState = this._oApplicationProperties.getProperty(\"/metaDataLoadState\");\n\t\t\tif (iMetadataLoadState === 1) {\n\t\t\t\tif (fnMetadataLoaded) {\n\t\t\t\t\tfnMetadataLoaded();\n\t\t\t\t}\n\t\t\t\tif (this._oApplicationProperties.getProperty(\"/lostDraftReadState\") < 0) {\n\t\t\t\t\tthis._checkForLostDraft();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (fnMetadataLoaded) {\n\t\t\t\t\tthis._oOnMetaData.onSuccess.push(fnMetadataLoaded);\n\t\t\t\t}\n\t\t\t\tif (fnNoMetadata) {\n\t\t\t\t\tthis._oOnMetaData.onFailure.push(fnNoMetadata);\n\t\t\t\t}\n\t\t\t\tif (iMetadataLoadState === -1) {\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/metaDataLoadState\", 0);\n\t\t\t\t\tthis._oComponent.getModel().refreshMetadata();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// This method is only important in portrait mode on a tablet. There it hides the master list.\n\t\thideMasterInPortrait: function() {\n\t\t\tthis._oMainView.getController().hideMaster();\n\t\t}\n\t});\n});",
		"whatever/controller/Detail.controller.js": "/*global location */\nsap.ui.define([\n\t\"whatever/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"whatever/model/formatter\",\n\t\"sap/m/MessageBox\",\n\t\"sap/m/MessageToast\",\n\t\"./utilities\"\n], function (BaseController, JSONModel, formatter, MessageBox, MessageToast, utilities) {\n\t\"use strict\";\n\treturn BaseController.extend(\"whatever.controller.Detail\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\nonInit: function () {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\nvar oViewModel = new JSONModel({\n\t\t\t\tbusy: false,\n\t\t\t\tdelay: 0,\n\t\t\t\tlineItemListTitle: this.getResourceBundle().getText(\"detailLineItemTableHeading\")\n\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"object\").attachPatternMatched(this._onObjectMatched, this);\n\t\t\tthis.setModel(oViewModel, \"detailView\");\n\n\t\t\tthis.getOwnerComponent().getModel().metadataLoaded().then(this._onMetadataLoaded.bind(this));\n\t\t\tthis._oODataModel = this.getOwnerComponent().getModel();\n\t\t\tthis._oResourceBundle = this.getResourceBundle();\n\t\t\t\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Event handler when the share by E-Mail button has been clicked\n\t\t * @public\n\t\t */\nonShareEmailPress: function () {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\tsap.m.URLHelper.triggerEmail(null, oViewModel.getProperty(\"/shareSendEmailSubject\"), oViewModel.getProperty(\"/shareSendEmailMessage\"));\n\t\t},\n\t\t/**\n\t\t * Event handler when the share in JAM button has been clicked\n\t\t * @public\n\t\t */\nonShareInJamPress: function () {\n\t\t\tvar oViewModel = this.getModel(\"detailView\"), oShareDialog = sap.ui.getCore().createComponent({\n\t\t\t\t\tname: \"sap.collaboration.components.fiori.sharing.dialog\",\n\t\t\t\t\tsettings: {\n\t\t\t\t\t\tobject: {\n\t\t\t\t\t\t\tid: location.href,\n\t\t\t\t\t\t\tshare: oViewModel.getProperty(\"/shareOnJamTitle\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\toShareDialog.open();\n\t\t},\n\t\t/**\n\t\t * Updates the item count within the line item table's header\n\t\t * @param {object} oEvent an event containing the total number of items in the list\n\t\t * @private\n\t\t */\nonListUpdateFinished: function (oEvent) {\n\t\t\tvar sTitle, iTotalItems = oEvent.getParameter(\"total\"), oViewModel = this.getModel(\"detailView\");\n\t\t\t// only update the counter if the length is final\nif (this.byId(\"lineItemsList\").getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tif (iTotalItems) {\n\t\t\t\t\tsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeadingCount\", [iTotalItems]);\n\t\t\t\t} else {\n\t\t\t\t\t//Display 'Line Items' instead of 'Line items (0)'\nsTitle = this.getResourceBundle().getText(\"detailLineItemTableHeading\");\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/lineItemListTitle\", sTitle);\n\t\t\t}\n\t\t\t\n\n\t\t\t\n\t\t},\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view delete button. Deletes the selected item. \n\t\t * @function\n\t\t * @public\n\t\t */\nonDelete: function () {\n\t\t\tvar that = this;\n\t\t\tvar oViewModel = this.getModel(\"detailView\"), sPath = oViewModel.getProperty(\"/sObjectPath\"), sObjectHeader = this._oODataModel.getProperty(sPath + \"/Name\"), sQuestion = this._oResourceBundle.getText(\"deleteText\", sObjectHeader), sSuccessMessage = this._oResourceBundle.getText(\"deleteSuccess\", sObjectHeader);\n\t\t\tvar fnMyAfterDeleted = function () {\n\t\t\t\tMessageToast.show(sSuccessMessage);\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\tvar oNextItemToSelect = that.getOwnerComponent().oListSelector.findNextItem(sPath);\n\t\t\t\tthat.getModel(\"appView\").setProperty(\"/itemToSelect\", oNextItemToSelect.getBindingContext().getPath());\t//save last deleted\n\t\t\t};\n\t\t\tthis._confirmDeletionByUser({ question: sQuestion }, [sPath], fnMyAfterDeleted);\n\t\t},\n\t\t/**\n\t\t * Event handler (attached declaratively) for the view edit button. Open a view to enable the user update the selected item. \n\t\t * @function\n\t\t * @public\n\t\t */\nonEdit: function () {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", false);\n\t\t\tvar sObjectPath = this.getView().getElementBinding().getPath();\n\t\t\tthis.getRouter().getTargets().display(\"edit\", {\n\t\t//\tthis.getRouter().getTargets().display(\"create\", {\n\t\t\t\tmode: \"update\",\n\t\t\t\tobjectPath: sObjectPath\n\t\t\t});\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Binds the view to the object path and expands the aggregated line items.\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t \n\t\t \n\t\t \n_onObjectMatched: function (oEvent) {\n\t\t\tvar oParameter = oEvent.getParameter(\"arguments\");\n\t\t\tfor (var value in oParameter) {\n\t\t\t\toParameter[value] = decodeURIComponent(oParameter[value]);\n\t\t\t}\n\t\t\tthis.getModel().metadataLoaded().then(function () {\n\t\t\t\tvar sObjectPath = this.getModel().createKey(\"Products\", oParameter);\n\t\t\t\tthis._bindView(\"/\" + sObjectPath);\n\t\t\t//\talert(sObjectPath);\n\t\t\t//\tthis._bindView(\"/Products('BM001'\");\n\t\t\t}.bind(this));\n\n\t\t},\n\t\t/**\n\t\t * Binds the view to the object path. Makes sure that detail view displays\n\t\t * a busy indicator while data for the corresponding element binding is loaded.\n\t\t * @function\n\t\t * @param {string} sObjectPath path to the object to be bound to the view.\n\t\t * @private\n\t\t */\n_bindView: function (sObjectPath) {\n\t\t\t// Set busy indicator during view binding\nvar oViewModel = this.getModel(\"detailView\");\n\t\t\t// If the view was not bound yet its not busy, only if the binding requests data it is set to busy again\noViewModel.setProperty(\"/busy\", false);\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: sObjectPath,\n\t\t\t\tevents: {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t//alert(\"ready to bind\");\n\t\t/*\tvar oView = this.getView();  \n\t\t\t oView.getId();\n\t\t\t var oTable = oView.byId(\"CommentsTable\"); \n\t\t\t oTable.bindItems(\"/Products\"); */\n\t\t\t /*oTable.bindElement({\n\t\t\t\tpath: \"/Comments\"\n\t\t\t});*/\n\t\t},\n\t\t/**\n\t\t * Event handler for binding change event\n\t\t * @function\n\t\t * @private\n\t\t */\n_onBindingChange: function () {\n\t\t\tvar oView = this.getView(), oElementBinding = oView.getElementBinding(), oViewModel = this.getModel(\"detailView\"), oAppViewModel = this.getModel(\"appView\");\n\t\t\t// No data for the binding\nif (!oElementBinding.getBoundContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"detailObjectNotFound\");\n\t\t\t\t// if object could not be found, the selection in the master list\n\t\t\t\t// does not make sense anymore.\nthis.getOwnerComponent().oListSelector.clearMasterListSelection();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar sPath = oElementBinding.getBoundContext().getPath(), oResourceBundle = this.getResourceBundle(), oObject = oView.getModel().getObject(sPath), sObjectId = oObject.Id, sObjectName = oObject.Name;\n\t\t\toViewModel.setProperty(\"/sObjectId\", sObjectId);\n\t\t\toViewModel.setProperty(\"/sObjectPath\", sPath);\n\t\t\toAppViewModel.setProperty(\"/itemToSelect\", sPath);\n\t\t\tthis.getOwnerComponent().oListSelector.selectAListItem(sPath);\n\t\t\toViewModel.setProperty(\"/saveAsTileTitle\", oResourceBundle.getText(\"shareSaveTileAppTitle\", [sObjectName]));\n\t\t\toViewModel.setProperty(\"/shareOnJamTitle\", sObjectName);\n\t\t\toViewModel.setProperty(\"/shareSendEmailSubject\", oResourceBundle.getText(\"shareSendEmailObjectSubject\", [sObjectId]));\n\t\t\toViewModel.setProperty(\"/shareSendEmailMessage\", oResourceBundle.getText(\"shareSendEmailObjectMessage\", [\n\t\t\t\tsObjectName,\n\t\t\t\tsObjectId,\n\t\t\t\tlocation.href\n\t\t\t]));\n \n\t\t},\n\t\t/**\n\t\t * Event handler for metadata loaded event\n\t\t * @function\n\t\t * @private\n\t\t */\n_onMetadataLoaded: function () {\n\t\t\t// Store original busy indicator delay for the detail view\nvar iOriginalViewBusyDelay = this.getView().getBusyIndicatorDelay(), oViewModel = this.getModel(\"detailView\"), oLineItemTable = this.byId(\"lineItemsList\"), iOriginalLineItemTableBusyDelay = oLineItemTable.getBusyIndicatorDelay();\n\t\t\t// Make sure busy indicator is displayed immediately when\n\t\t\t// detail view is displayed for the first time\noViewModel.setProperty(\"/delay\", 0);\n\t\t\toViewModel.setProperty(\"/lineItemTableDelay\", 0);\n\t\t\toLineItemTable.attachEventOnce(\"updateFinished\", function () {\n\t\t\t\t// Restore original busy indicator delay for line item table\noViewModel.setProperty(\"/lineItemTableDelay\", iOriginalLineItemTableBusyDelay);\n\t\t\t});\n\t\t\t// Binding the view will set it to not busy - so the view is always busy if it is not bound\noViewModel.setProperty(\"/busy\", true);\n\t\t\t// Restore original busy indicator delay for the detail view\noViewModel.setProperty(\"/delay\", iOriginalViewBusyDelay);\n\t\t},\n\t\t/**\n\t\t * Opens a dialog letting the user either confirm or cancel the deletion of a list of entities\n\t\t * @param {object} oConfirmation - Possesses up to two attributes: question (obligatory) is a string providing the statement presented to the user.\n\t\t * title (optional) may be a string defining the title of the popup.\n\t\t * @param {object} oConfirmation - Possesses up to two attributes: question (obligatory) is a string providing the statement presented to the user.\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the entities to be deleted. Currently only one is supported.\n\t\t * @param {callback} fnAfterDeleted (optional) - called after deletion is done. \n\t\t * @param {callback} fnDeleteCanceled (optional) - called when the user decides not to perform the deletion\n\t\t * @param {callback} fnDeleteConfirmed (optional) - called when the user decides to perform the deletion. A Promise will be passed\n\t\t * @function\n\t\t * @private\n\t\t */\n\t\t/* eslint-disable */\n\t\t// using more then 4 parameters for a function is justified here\n_confirmDeletionByUser: function (oConfirmation, aPaths, fnAfterDeleted, fnDeleteCanceled, fnDeleteConfirmed) {\n\t\t\t/* eslint-enable */\n\t\t\t// Callback function for when the user decides to perform the deletion\nvar fnDelete = function () {\n\t\t\t\t// Calls the oData Delete service\nthis._callDelete(aPaths, fnAfterDeleted);\n\t\t\t}.bind(this);\n\t\t\t// Opens the confirmation dialog\nMessageBox.show(oConfirmation.question, {\n\t\t\t\ticon: oConfirmation.icon || MessageBox.Icon.WARNING,\n\t\t\t\ttitle: oConfirmation.title || this._oResourceBundle.getText(\"delete\"),\n\t\t\t\tactions: [\n\t\t\t\t\tMessageBox.Action.OK,\n\t\t\t\t\tMessageBox.Action.CANCEL\n\t\t\t\t],\n\t\t\t\tonClose: function (oAction) {\n\t\t\t\t\tif (oAction === MessageBox.Action.OK) {\n\t\t\t\t\t\tfnDelete();\n\t\t\t\t\t} else if (fnDeleteCanceled) {\n\t\t\t\t\t\tfnDeleteCanceled();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Performs the deletion of a list of entities.\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the entities to be deleted. Currently only one is supported.\n\t\t * @param {callback} fnAfterDeleted (optional) - called after deletion is done. \n\t\t * @return a Promise that will be resolved as soon as the deletion process ended successfully.\n\t\t * @function\n\t\t * @private\n\t\t */\n_callDelete: function (aPaths, fnAfterDeleted) {\n\t\t\tvar oViewModel = this.getModel(\"detailView\");\n\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\tvar fnFailed = function () {\n\t\t\t\tthis._oODataModel.setUseBatch(true);\n\t\t\t}.bind(this);\n\t\t\tvar fnSuccess = function () {\n\t\t\t\tif (fnAfterDeleted) {\n\t\t\t\t\tfnAfterDeleted();\n\t\t\t\t\tthis._oODataModel.setUseBatch(true);\n\t\t\t\t}\n\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t}.bind(this);\n\t\t\treturn this._deleteOneEntity(aPaths[0], fnSuccess, fnFailed);\n\t\t},\n\t\t/**\n\t\t * Deletes the entity from the odata model\n\t\t * @param {array} aPaths -  Array of strings representing the context paths to the entities to be deleted. Currently only one is supported.\n\t\t * @param {callback} fnSuccess - Event handler for success operation.\n\t\t * @param {callback} fnFailed - Event handler for failure operation.\n\t\t * @function\n\t\t * @private\n\t\t */\n_deleteOneEntity: function (sPath, fnSuccess, fnFailed) {\n\t\t\tvar oPromise = new Promise(function (fnResolve, fnReject) {\n\t\t\t\tthis._oODataModel.setUseBatch(false);\n\t\t\t\tthis._oODataModel.remove(sPath, {\n\t\t\t\t\tsuccess: fnResolve,\n\t\t\t\t\terror: fnReject,\n\t\t\t\t\tasync: true\n\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t\toPromise.then(fnSuccess, fnFailed);\n\t\t\treturn oPromise;\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Detail\n\t*/\nonClickBuySell: function () {\n\t\t\tif (this.getView().byId(\"__BuySellButton\").getPressed()) {\n\t\t\t\tthis.getView().byId(\"__BuySellButton\").setText(\"Sell\");\n\t\t\t} else {\n\t\t\t\tthis.getView().byId(\"__BuySellButton\").setText(\"Buy\");\n\t\t\t}\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Detail\n\t*/\n\t\n\t\n\t_initializeUserCard: function() {\n\t   \tvar oView = this.getView();\n\t\t\tthis.oUserCard = sap.ui.xmlfragment(oView.getId(), \"whatever.view.UserCard\");\n\t\t\tthis.oUserCard.bindElement({\n\t\t\t\tpath: \"User\"\n\t\t\t});\n\t\t\tutilities.attachControlToView(oView, this.oUserCard);\n\t},\n\t\n\t_initializeSupplierCard: function() {\n\t\t\tvar oView = this.getView();\n\t\t\tthis._oSupplierCard = sap.ui.xmlfragment(oView.getId(), \"whatever.view.SupplierCard\");\n\t\t\tthis._oSupplierCard.bindElement({\n\t\t\t\tpath: \"Supplier\"\n\t\t\t});\n\t\t\tutilities.attachControlToView(oView, this._oSupplierCard);\n\t\t},\n\t\n\t\tonSupplierPressed: function(oEvent) {\n\t\t\tif (!this._oSupplierCard) {\n\t\t\t\tthis._initializeSupplierCard();\n\t\t\t}\n\t\t\tthis._oSupplierCard.openBy(oEvent.getSource());\n\t\t},\t\n\t\t\n\t\tonUserPressed: function(oEvent) {\n\t\t\tif (!this.oUserCard) {\n\t\t\t\tthis._initializeUserCard();\n\t\t\t}\n\t\t\tthis.oUserCard.openBy(oEvent.getSource());\n\t\t\t\n\n\t\t},\t\n\t\nonClickLike: function () {\n\t\t\tif (this.getView().byId(\"__likeButton\").getPressed()) {\n\t\t\t\tthis.getView().byId(\"__likeButton\").setText(\"UnLike\");\n\t\t\t} else {\n\t\t\t\tthis.getView().byId(\"__likeButton\").setText(\"Like\");\n\t\t\t}\n\t\t}\n\t});\n});",
		"whatever/controller/ErrorHandler.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/MessageBox\"\n], function(UI5Object, MessageBox) {\n\t\"use strict\";\n\n\treturn UI5Object.extend(\"whatever.controller.ErrorHandler\", {\n\n\t\t/**\n\t\t * Handles application errors by automatically attaching to the model events and displaying errors when needed.\n\t\t * @class\n\t\t * @param {sap.ui.core.UIComponent} oComponent reference to the app's component\n\t\t * @public\n\t\t * @alias whatever.controller.ErrorHandler\n\t\t */\n\t\tconstructor: function(oComponent) {\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oComponent = oComponent;\n\t\t\tthis._oModel = oComponent.getModel();\n\t\t\tthis._bMessageOpen = false;\n\t\t\tthis._sErrorText = this._oResourceBundle.getText(\"errorText\");\n\n\t\t\tthis._oModel.attachMetadataFailed(function(oEvent) {\n\t\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t\tthis._showMetadataError(oParams.response);\n\t\t\t}, this);\n\n\t\t\tthis._oModel.attachRequestFailed(this.onRequestFailed, this);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Event Handler for Request Fail event\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {object} oEvent an event containing the response data\n\t\t * @private\n\t\t */\n\t\tonRequestFailed: function(oEvent) {\n\t\t\tvar oParams = oEvent.getParameters();\n\n\t\t\t// An entity that was not found in the service is also throwing a 404 error in oData.\n\t\t\t// We already cover this case with a notFound target so we skip it here.\n\t\t\t// A request that cannot be sent to the server is a technical error that we have to handle though\n\t\t\tif ((oParams.response.statusCode !== \"404\") || (oParams.response.statusCode === 404 &&\n\t\t\t\t\toParams.response.responseText.indexOf(\"Cannot POST\") === 0)) {\n\t\t\t\tthis._showServiceError(oParams.response);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when the metadata call has failed.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showMetadataError: function(sDetails) {\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"metadataErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.RETRY, MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function(sAction) {\n\t\t\t\t\t\tif (sAction === MessageBox.Action.RETRY) {\n\t\t\t\t\t\t\tthis._oModel.refreshMetadata();\n\t\t\t\t\t\t}\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox}.\n\t\t * The user can try to refresh the metadata.\n\t\t * @param {string} sTitle the MessageBox title, {string} sMessageHeader and {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showErrorMsg: function(sTitle, sMessageHeader, sDetails) {\n\n\t\t\tMessageBox.error(\n\t\t\t\tsMessageHeader, {\n\t\t\t\t\tid: \"ErrorMessageBox\",\n\t\t\t\t\ttitle: sTitle,\n\t\t\t\t\tdetails: sDetails,\n\t\t\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: MessageBox.Action.CLOSE\n\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Shows a {@link sap.m.MessageBox} when a service call has failed.\n\t\t * Only the first error message will be display.\n\t\t * @param {string} sDetails a technical error to be displayed on request\n\t\t * @private\n\t\t */\n\t\t_showServiceError: function(sDetails) {\n\t\t\tif (this._bMessageOpen) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._bMessageOpen = true;\n\t\t\tMessageBox.error(\n\t\t\t\tthis._sErrorText, {\n\t\t\t\t\tid: \"serviceErrorMessageBox\",\n\t\t\t\t\tdetails: sDetails.responseText,\n\t\t\t\t\tstyleClass: this._oComponent.getContentDensityClass(),\n\t\t\t\t\tactions: [MessageBox.Action.CLOSE],\n\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\tthis._bMessageOpen = false;\n\t\t\t\t\t}.bind(this)\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\n});",
		"whatever/controller/Balance.controller.js": "sap.ui.define([\r\n\t\"whatever/controller/BaseController\",\r\n\t\"sap/ui/model/json/JSONModel\",\r\n\t\"whatever/model/formatter\",\r\n\t\"sap/m/MessageBox\",\r\n\t\"sap/m/MessageToast\"\r\n], function (BaseController, JSONModel, formatter, MessageBox, MessageToast) {\r\n\t\"use strict\";\r\n\r\n\treturn BaseController.extend(\"whatever.controller.Balance\", {\r\n\r\n\t\t/**\r\n\t\t * Called when a controller is instantiated and its View controls (if available) are already created.\r\n\t\t * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t\tonInit: function() {\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\r\n\t\t * (NOT before the first rendering! onInit() is used for that one!).\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonBeforeRendering: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\r\n\t\t * This hook is the same one that SAPUI5 controls get after being rendered.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonAfterRendering: function() {\r\n\t\t//\r\n\t\t//\t},\r\n\r\n\t\t/**\r\n\t\t * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\r\n\t\t * @memberOf tempView.view.tempView\r\n\t\t */\r\n\t\t//\tonExit: function() {\r\n\t\t//\r\n\t\t//\t}\r\n\r\n\t});\r\n\r\n});",
		"whatever/controller/ListSelector.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/m/GroupHeaderListItem\"\n], function(BaseObject, GroupHeaderListItem) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"whatever.model.ListSelector\", {\n\n\t\t/**\n\t\t * Provides a convenience API for selecting list items. All the functions will wait until the initial load of the a List passed to the instance by the setBoundMasterList\n\t\t * function.\n\t\t * @class\n\t\t * @public\n\t\t * @alias whatever.model.ListSelector\n\t\t */\n\n\t\tconstructor: function() {\n\t\t\tthis._oWhenListHasBeenSet = new Promise(function(fnResolveListHasBeenSet) {\n\t\t\t\tthis._fnResolveListHasBeenSet = fnResolveListHasBeenSet;\n\t\t\t}.bind(this));\n\t\t\t// This promise needs to be created in the constructor, since it is allowed to\n\t\t\t// invoke selectItem functions before calling setBoundMasterList\n\t\t\tthis.oWhenListLoadingIsDone = new Promise(function(fnResolve, fnReject) {\n\t\t\t\t// Used to wait until the setBound masterList function is invoked\n\t\t\t\tthis._oWhenListHasBeenSet\n\t\t\t\t\t.then(function(oList) {\n\t\t\t\t\t\toList.getBinding(\"items\").attachEventOnce(\"dataReceived\",\n\t\t\t\t\t\t\tfunction(oData) {\n\t\t\t\t\t\t\t\tif (!oData.getParameter(\"data\")) {\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: true\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar oFirstListItem = oList.getItems()[0];\n\t\t\t\t\t\t\t\tif (oFirstListItem) {\n\t\t\t\t\t\t\t\t\t// Have to make sure that first list Item is selected\n\t\t\t\t\t\t\t\t\t// and a select event is triggered. Like that, the corresponding\n\t\t\t\t\t\t\t\t\t// detail page is loaded automatically\n\t\t\t\t\t\t\t\t\tfnResolve({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\tfirstListitem: oFirstListItem\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// No items in the list\n\t\t\t\t\t\t\t\t\tfnReject({\n\t\t\t\t\t\t\t\t\t\tlist: oList,\n\t\t\t\t\t\t\t\t\t\terror: false\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * A bound list should be passed in here. Should be done, before the list has received its initial data from the server.\n\t\t * May only be invoked once per ListSelector instance.\n\t\t * @param {sap.m.List} oList The list all the select functions will be invoked on.\n\t\t * @public\n\t\t */\n\t\tsetBoundMasterList: function(oList) {\n\t\t\tthis._oList = oList;\n\t\t\tthis._fnResolveListHasBeenSet(oList);\n\t\t},\n\n\t\t/**\n\t\t * Tries to select and scroll to a list item with a matching binding context. If there are no items matching the binding context or the ListMode is none,\n\t\t * no selection/scrolling will happen\n\t\t * @param {string} sBindingPath the binding path matching the binding path of a list item\n\t\t * @public\n\t\t */\n\t\tselectAListItem: function(sBindingPath) {\n\n\t\t\tthis.oWhenListLoadingIsDone.then(\n\t\t\t\tfunction() {\n\t\t\t\t\tvar oList = this._oList,\n\t\t\t\t\t\toSelectedItem;\n\n\t\t\t\t\tif (oList.getMode() === \"None\") {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toSelectedItem = oList.getSelectedItem();\n\n\t\t\t\t\t// skip update if the current selection is already matching the object path\n\t\t\t\t\tif (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\toList.getItems().some(function(oItem) {\n\t\t\t\t\t\tif (oItem.getBindingContext() && oItem.getBindingContext().getPath() === sBindingPath) {\n\t\t\t\t\t\t\toList.setSelectedItem(oItem);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}.bind(this),\n\t\t\t\tfunction() {\n\t\t\t\t\tjQuery.sap.log.warning(\"Could not select the list item with the path\" + sBindingPath +\n\t\t\t\t\t\t\" because the list encountered an error or had no items\");\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* Convenience Functions for List Selection Change Event       */\n\t\t/* =========================================================== */\n\n\t\t/**\n\t\t * Attaches a listener and listener function to the ListSelector's bound master list. By using\n\t\t * a promise, the listener is added, even if the list is not available when 'attachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {whatever.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tattachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.attachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Detaches a listener and listener function from the ListSelector's bound master list. By using\n\t\t * a promise, the listener is removed, even if the list is not available when 'detachListSelectionChange'\n\t\t * is called.\n\t\t * @param {function} fnFunction the function to be executed when the list fires a selection change event\n\t\t * @param {function} oListener the listener object\n\t\t * @return {whatever.model.ListSelector} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tdetachListSelectionChange: function(fnFunction, oListener) {\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.detachSelectionChange(fnFunction, oListener);\n\t\t\t}.bind(this));\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Removes all selections from master list.\n\t\t * Does not trigger 'selectionChange' event on master list, though.\n\t\t * @public\n\t\t */\n\t\tclearMasterListSelection: function() {\n\t\t\t//use promise to make sure that 'this._oList' is available\n\t\t\tthis._oWhenListHasBeenSet.then(function() {\n\t\t\t\tthis._oList.removeSelections(true);\n\t\t\t}.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Find the next valid list item from the master list after the current.\n\t\t * @return {sap.m.ListItem} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindNextItem: function(sCurrentPath) {\n\t\t\tvar aItems = this._oList.getItems();\n\t\t\tvar iItemsCount = aItems.length;\n\t\t\tif (iItemsCount === 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (iItemsCount > 0) {\n\t\t\t\tvar bFound = false;\n\t\t\t\tfor (var i = 0; i < iItemsCount; i++) {\n\t\t\t\t\tvar oItem = aItems[i];\n\t\t\t\t\tif (!(oItem instanceof GroupHeaderListItem)) {\n\t\t\t\t\t\tvar oCtx = oItem.getBindingContext(),\n\t\t\t\t\t\t\tsPath = oCtx.getPath();\n\t\t\t\t\t\tbFound = sPath === sCurrentPath;\n\t\t\t\t\t\tif (bFound) {\n\t\t\t\t\t\t\tif (i === iItemsCount - 1) { //the current item is the last but not the only one\n\t\t\t\t\t\t\t\treturn aItems[0];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn aItems[i + 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!bFound) {\n\t\t\t\t\treturn null; //not valid\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Find the list item from a path.\n\t\t * @return {sap.m.ListItem} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindListItem: function(sPath) {\n\t\t\tvar aItems = this._oList.getItems();\n\t\t\tfor (var i = 0; i < aItems.length; i++) {\n\t\t\t\tvar oItem = aItems[i];\n\t\t\t\tif (!(oItem instanceof GroupHeaderListItem)) {\n\t\t\t\t\tvar oCtx = oItem.getBindingContext();\n\t\t\t\t\tvar bFound = sPath === oCtx.getPath();\n\t\t\t\t\tif (bFound) {\n\t\t\t\t\t\treturn oItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null; //not found\n\t\t},\n\t\t/**\n\t\t * Find the first list item\n\t\t * @return {sap.m.ListItem} the list selector object for method chaining\n\t\t * @public\n\t\t */\n\t\tfindFirstItem: function() {\n\t\t\tvar aItems = this._oList.getItems();\n\t\t\tif (aItems && aItems.length > 0) {\n\t\t\t\treturn aItems[0];\n\t\t\t}\n\t\t\treturn null; //not found\n\t\t}\n\t});\n\n});",
		"whatever/controller/Master.controller.js": "/*global history */\nsap.ui.define([\n\t\"whatever/controller/BaseController\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/m/GroupHeaderListItem\",\n\t\"sap/ui/Device\",\n\t\"whatever/model/formatter\",\n\t\"sap/m/MessageBox\"\n], function (BaseController, JSONModel, Filter, FilterOperator, GroupHeaderListItem, Device, formatter, MessageBox) {\n\t\"use strict\";\n\treturn BaseController.extend(\"whatever.controller.Master\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Called when the master list controller is instantiated. It sets up the event handling for the master/detail communication and other lifecycle tasks.\n\t\t * @public\n\t\t */\nonInit: function () {\n\t\t\t// Control state model\nvar oList = this.byId(\"list\"), oViewModel = this._createViewModel(),\n\t\t\t\t// Put down master list's original value for busy indicator delay,\n\t\t\t\t// so it can be restored later on. Busy handling on the master list is\n\t\t\t\t// taken care of by the master list itself.\niOriginalBusyDelay = oList.getBusyIndicatorDelay();\n\t\t\tthis._oListSelector = this.getOwnerComponent().oListSelector;\n\t\t\tthis._oList = oList;\n\t\t\t// keeps the filter and search state\nthis._oListFilterState = {\n\t\t\t\taFilter: [],\n\t\t\t\taSearch: []\n\t\t\t};\n\t\t\tthis.setModel(oViewModel, \"masterView\");\n\t\t\t// Make sure, busy indication is showing immediately so there is no\n\t\t\t// break after the busy indication for loading the view's meta data is\n\t\t\t// ended (see promise 'oWhenMetadataIsLoaded' in AppController)\noList.attachEventOnce(\"updateFinished\", function () {\n\t\t\t\t// Restore original busy indicator delay for the list\noViewModel.setProperty(\"/delay\", iOriginalBusyDelay);\n\t\t\t});\n\t\t\tthis.getView().addEventDelegate({\n\t\t\t\tonBeforeFirstShow: function () {\n\t\t\t\t\tthis._oListSelector.setBoundMasterList(oList);\n\t\t\t\t}.bind(this)\n\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"master\").attachPatternMatched(this._onMasterMatched, this);\n\t\t\tthis.getRouter().attachBypassed(this.onBypassed, this);\n\t\t\tthis._oODataModel = this.getOwnerComponent().getModel();\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * After list data is available, this handler method updates the\n\t\t * master list counter and hides the pull to refresh control, if\n\t\t * necessary.\n\t\t * @param {sap.ui.base.Event} oEvent the update finished event\n\t\t * @public\n\t\t */\nonUpdateFinished: function (oEvent) {\n\t\t\t// update the master list object counter after new data is loaded\nthis._updateListItemCount(oEvent.getParameter(\"total\"));\n\t\t\t// hide pull to refresh if necessary\nthis.byId(\"pullToRefresh\").hide();\n\t\t\tthis._findItem();\n\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t},\n\t\t/**\n\t\t * Event handler for the master search field. Applies current\n\t\t * filter value and triggers a new search. If the search field's\n\t\t * 'refresh' button has been pressed, no new search is triggered\n\t\t * and the list binding is refresh instead.\n\t\t * @param {sap.ui.base.Event} oEvent the search event\n\t\t * @public\n\t\t */\nonSearch: function (oEvent) {\n\t\t\tif (oEvent.getParameters().refreshButtonPressed) {\n\t\t\t\t// Search field's 'refresh' button has been pressed.\n\t\t\t\t// This is visible if you select any master list item.\n\t\t\t\t// In this case no new search is triggered, we only\n\t\t\t\t// refresh the list binding.\nthis.onRefresh();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar sQuery = oEvent.getParameter(\"query\");\n\t\t\tif (sQuery) {\n\t\t\t\tthis._oListFilterState.aSearch = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t} else {\n\t\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\t}\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\t/**\n\t\t * Event handler for refresh event. Keeps filter, sort\n\t\t * and group settings and refreshes the list binding.\n\t\t * @public\n\t\t */\nonRefresh: function () {\n\t\t\tthis._oList.getBinding(\"items\").refresh();\n\t\t},\n\t\t/**\n\t\t * Event handler for the sorter selection.\n\t\t * @param {sap.ui.base.Event} oEvent the select event\n\t\t * @public\n\t\t */\nonSort: function (oEvent) {\n\t\t\tvar sKey = oEvent.getSource().getSelectedItem().getKey(), aSorters = this._oGroupSortState.sort(sKey);\n\t\t\tthis._applyGroupSort(aSorters);\n\t\t},\n\t\t/**\n\t\t * Event handler for the list selection event\n\t\t * @param {sap.ui.base.Event} oEvent the list selectionChange event\n\t\t * @public\n\t\t */\nonSelectionChange: function (oEvent) {\n\t\t\tvar that = this;\n\t\t\tvar oItem = oEvent.getParameter(\"listItem\") || oEvent.getSource();\n\t\t\tvar fnLeave = function () {\n\t\t\t\tthat._oODataModel.resetChanges();\n\t\t\t\tthat._showDetail(oItem);\n\t\t\t};\n\t\t\tif (this._oODataModel.hasPendingChanges()) {\n\t\t\t\tthis._leaveEditPage(fnLeave);\n\t\t\t} else {\n\t\t\t\tthis._showDetail(oItem);\n\t\t\t}\n\t\t\tthat.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t},\n\t\t/**\n\t\t * Event handler for the bypassed event, which is fired when no routing pattern matched.\n\t\t * If there was an object selected in the master list, that selection is removed.\n\t\t * @public\n\t\t */\nonBypassed: function () {\n\t\t\tthis._oList.removeSelections(true);\n\t\t},\n\t\t/**\n\t\t * Used to create GroupHeaders with non-capitalized caption.\n\t\t * These headers are inserted into the master list to\n\t\t * group the master list's items.\n\t\t * @param {Object} oGroup group whose text is to be displayed\n\t\t * @public\n\t\t * @returns {sap.m.GroupHeaderListItem} group header with non-capitalized caption.\n\t\t */\ncreateGroupHeader: function (oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle: oGroup.text,\n\t\t\t\tupperCase: false\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Navigates back in the browser history, if the entry was created by this app.\n\t\t * If not, it navigates to the Fiori Launchpad home page\n\t\t * @override\n\t\t * @public\n\t\t */\nonNavBack: function () {\n\t\t\tvar oHistory = sap.ui.core.routing.History.getInstance(), sPreviousHash = oHistory.getPreviousHash(), oCrossAppNavigator = sap.ushell.Container.getService(\"CrossApplicationNavigation\");\n\t\t\tif (sPreviousHash !== undefined) {\n\t\t\t\t// The history contains a previous entry\nhistory.go(-1);\n\t\t\t} else {\n\t\t\t\t// Navigate back to FLP home\noCrossAppNavigator.toExternal({ target: { shellHash: \"#Shell-home\" } });\n\t\t\t}\n\t\t},\n\n\t\t/* =========================================================== */\n\t\t/* begin: internal methods                                     */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Creates the model for the view\n\t\t * @private\n\t\t */\n_createViewModel: function () {\n\t\t\treturn new JSONModel({\n\t\t\t\tisFilterBarVisible: false,\n\t\t\t\tfilterBarLabel: \"\",\n\t\t\t\tdelay: 0,\n\t\t\t\ttitle: this.getResourceBundle().getText(\"masterTitleCount\", [0]),\n\t\t\t\tnoDataText: this.getResourceBundle().getText(\"masterListNoDataText\"),\n\t\t\t\tsortBy: \"Name\",\n\t\t\t\tgroupBy: \"None\"\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * Ask for user confirmation to leave the edit page and discard all changes\n\t\t * @param {object} fnLeave - handles discard changes\n\t\t * @param {object} fnLeaveCancelled - handles cancel\n\t\t * @private\n\t\t */\n_leaveEditPage: function (fnLeave, fnLeaveCancelled) {\n\t\t\tvar sQuestion = this.getResourceBundle().getText(\"warningConfirm\");\n\t\t\tvar sTitle = this.getResourceBundle().getText(\"warning\");\n\t\t\tMessageBox.show(sQuestion, {\n\t\t\t\ticon: MessageBox.Icon.WARNING,\n\t\t\t\ttitle: sTitle,\n\t\t\t\tactions: [\n\t\t\t\t\tMessageBox.Action.OK,\n\t\t\t\t\tMessageBox.Action.CANCEL\n\t\t\t\t],\n\t\t\t\tonClose: function (oAction) {\n\t\t\t\t\tif (oAction === MessageBox.Action.OK) {\n\t\t\t\t\t\tfnLeave();\n\t\t\t\t\t} else if (fnLeaveCancelled) {\n\t\t\t\t\t\tfnLeaveCancelled();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t/**\n\t\t * If the master route was hit (empty hash) we have to set\n\t\t * the hash to to the first item in the list as soon as the\n\t\t * listLoading is done and the first item in the list is known\n\t\t * @private\n\t\t */\n_onMasterMatched: function () {\n\t\t\tthis._oListSelector.oWhenListLoadingIsDone.then(function (mParams) {\n\t\t\t\tif (mParams.list.getMode() === \"None\") {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", true);\n\t\t\t\tif (!mParams.list.getSelectedItem()) {\n\t\t\t\t\tthis.getRouter().navTo(\"object\", { Id: encodeURIComponent(mParams.firstListitem.getBindingContext().getProperty(\"Id\")) }, true);\n\t\t\t\t}\n\t\t\t}.bind(this), function (mParams) {\n\t\t\t\tif (mParams.error) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t}.bind(this));\n\t\t},\n\t\t/**\n\t\t * Shows the selected item on the detail page\n\t\t * On phones a additional history entry is created\n\t\t * @param {sap.m.ObjectListItem} oItem selected Item\n\t\t * @private\n\t\t */\n_showDetail: function (oItem) {\n\t\t\tvar bReplace = !Device.system.phone;\n\t\t\tthis.getRouter().navTo(\"object\", { Id: encodeURIComponent(oItem.getBindingContext().getProperty(\"Id\")) }, bReplace);\n\t\t},\n\t\t/**\n\t\t * Sets the item count on the master list header\n\t\t * @param {integer} iTotalItems the total number of items in the list\n\t\t * @private\n\t\t */\n_updateListItemCount: function (iTotalItems) {\n\t\t\tvar sTitle;\n\t\t\t// only update the counter if the length is final\nif (this._oList.getBinding(\"items\").isLengthFinal()) {\n\t\t\t\tsTitle = this.getResourceBundle().getText(\"masterTitleCount\", [iTotalItems]);\n\t\t\t\tthis.getModel(\"masterView\").setProperty(\"/title\", sTitle);\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Internal helper method to apply both filter and search state together on the list binding\n\t\t * @private\n\t\t */\n_applyFilterSearch: function () {\n\t\t\tvar aFilters = this._oListFilterState.aSearch.concat(this._oListFilterState.aFilter), oViewModel = this.getModel(\"masterView\");\n\t\t\tthis._oList.getBinding(\"items\").filter(aFilters, \"Application\");\n\t\t\t// changes the noDataText of the list in case there are no filter results\nif (aFilters.length !== 0) {\n\t\t\t\toViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataWithFilterOrSearchText\"));\n\t\t\t} else if (this._oListFilterState.aSearch.length > 0) {\n\t\t\t\t// only reset the no data text to default when no new search was triggered\noViewModel.setProperty(\"/noDataText\", this.getResourceBundle().getText(\"masterListNoDataText\"));\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Internal helper method to apply both group and sort state together on the list binding\n\t\t * @private\n\t\t */\n_applyGroupSort: function (aSorters) {\n\t\t\tthis._oList.getBinding(\"items\").sort(aSorters);\n\t\t},\n\t\t/**\n\t\t * Internal helper method that sets the filter bar visibility property and the label's caption to be shown\n\t\t * @param {string} sFilterBarText the selected filter value\n\t\t * @private\n\t\t */\n_updateFilterBar: function (sFilterBarText) {\n\t\t\tvar oViewModel = this.getModel(\"masterView\");\n\t\t\toViewModel.setProperty(\"/isFilterBarVisible\", this._oListFilterState.aFilter.length > 0);\n\t\t\toViewModel.setProperty(\"/filterBarLabel\", this.getResourceBundle().getText(\"masterFilterBarText\", [sFilterBarText]));\n\t\t},\n\t\t/**\n\t\t * Internal helper method that adds \"/\" to the item's path \n\t\t * @private\n\t\t */\n_fnGetPathWithSlash: function (sPath) {\n\t\t\treturn (sPath.indexOf(\"/\") === 0 ? \"\" : \"/\") + sPath;\n\t\t},\n\t\t/**\n\t\t * It navigates to the saved itemToSelect item. After delete it navigate to the next item. \n\t\t * After add it navigates to the new added item if it is displayed in the tree. If not it navigates to the first item.\n\t\t * @private\n\t\t */\n_findItem: function () {\n\t\t\tvar itemToSelect = this.getModel(\"appView\").getProperty(\"/itemToSelect\");\n\t\t\tif (itemToSelect) {\n\t\t\t\tvar sPath = this._fnGetPathWithSlash(itemToSelect);\n\t\t\t\tvar oItem = this._oListSelector.findListItem(sPath);\n\t\t\t\tif (!oItem) {\n\t\t\t\t\t//item is not viewable in the tree. not in the current tree page.\noItem = this._oListSelector.findFirstItem();\n\t\t\t\t\tif (oItem) {\n\t\t\t\t\t\tsPath = oItem.getBindingContext().getPath();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.getRouter().getTargets().display(\"detailNoObjectsAvailable\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._oListSelector.selectAListItem(sPath);\n\t\t\t\tthis._showDetail(oItem);\n\t\t\t}\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Master\n\t*/\nonHomeClicked: function () {\n\t\t\tthis._oListFilterState.aSearch = [];\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\tonCommunityClicked: function () {\n\t\t\tthis._oListFilterState.aSearch = [new Filter(\"Audience\", FilterOperator.Contains, \"Community\")];\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\tonFriendsClicked: function () {\n\t\t\tthis._oListFilterState.aSearch = [new Filter(\"Audience\", FilterOperator.Contains, \"Friends\")];\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Master\n\t*/\nonMeClicked: function () {\n\t\t\tthis._oListFilterState.aSearch = [new Filter(\"Audience\", FilterOperator.Contains, \"Me\")];\n\t\t\tthis._applyFilterSearch();\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Master\n\t*/\n\t\n\t\t/**\n\t\t * Event handler  (attached declaratively) called when the add button in the master view is pressed. it opens the create view.\n\t\t * @public\n\t\t */\nonAdd: function () {\n\t\t\tthis.getModel(\"appView\").setProperty(\"/addEnabled\", false);\n\t\t\tthis.getRouter().getTargets().display(\"create\");\n\t\t},\t\n\t\nonClickCashButton: function () {\n\t\t\tthis.getRouter().getTargets().display(\"cashDetail\");\n\t\t},\n\t\t/**\n\t*@memberOf whatever.controller.Master\n\t*/\nonClickTakePhoto: function () {\n\t\t\t\tMessageBox.show(\n                                 \"Image Upload is Coming!\", { \n\t\t\t\t      icon: sap.m.MessageBox.Icon.INFORMATION,    \n\t\t      \t\t      title: \"Coin Turtle\",    \n\t\t\t\t      actions: [sap.m.MessageBox.Action.OK]\n\t\t\t\t\t\t});\n\n\n\t\t}\n\t});\n});",
		"whatever/controller/utilities.js": "sap.ui.define([\n\t\"sap/ui/Device\"\n], function(Device) {\n\t\"use strict\";\n\n\t// class providing static utility methods.\n\n\t// the densitiy class that should be used according to the device\n\tvar sContentDensityClass = Device.support.touch ? \"sapUiSizeCozy\" : \"sapUiSizeCompact\";\n\n\treturn {\n\t\t// provide the density class that should be used according to the device type \n\t\tgetContentDensityClass: function() {\n\t\t\treturn sContentDensityClass;\n\t\t},\n\n\t\t// defines a dependency from oControl to oView\n\t\tattachControlToView: function(oView, oControl) {\n\t\t\tjQuery.sap.syncStyleClass(sContentDensityClass, oView, oControl);\n\t\t\toView.addDependent(oControl);\n\t\t}\n\t};\n});",
		"whatever/controller/ProductEdit.controller.js": "// Note that this view is hosted by nw.epm.refapps.ext.prod.manage.view.S3_ProductDetail. Thus, it implements the lifecycle methods show and leave\n// defined by this view.\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/core/Component\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/comp/odata/MetadataAnalyser\",\n\t\"sap/ui/comp/providers/ValueHelpProvider\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/ui/Device\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterType\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/core/ValueState\",\n\t\"./SubControllerForShare\",\n\t\"nw/epm/refapps/ext/prod/manage/model/formatter\"\n], function(Controller, Component, JSONModel, MetadataAnalyser, ValueHelpProvider, Sorter, Device, Filter, FilterType, FilterOperator,\n\tValueState, SubControllerForShare, formatter) {\n\t\"use strict\";\n\n\t// This method returns an array that contains all entries of the array aArray that are truthy (in the same order).\n\t// If all entries of aArray are truthy it is returned, otherwise a new array is returned.\n\tfunction fnArrayFilteredTruthy(aArray) {\n\t\tvar aCopy = null;\n\t\tfor (var i = 0; i < aArray.length; i++) {\n\t\t\tvar oEntry = aArray[i];\n\t\t\tif (oEntry) {\n\t\t\t\tif (aCopy) {\n\t\t\t\t\taCopy.push(oEntry);\n\t\t\t\t}\n\t\t\t} else if (!aCopy) {\n\t\t\t\taCopy = aArray.slice(0, i);\n\t\t\t}\n\t\t}\n\t\treturn aCopy || aArray;\n\t}\n\n\treturn Controller.extend(\"whatever.controller.ProductEdit\", {\n\t\tformatter: formatter,\n\t\t// --- Helper attributes that are initialized during onInit and never changed afterwards\n\n\t\t// _oViewProperties: json model used to manipulate declarative attributes of the controls used in this view. Initialized in _initViewPropertiesModel.\n\t\t// Contains the attribute dataLoaded which is set to true, as soon as the product is loaded\n\t\t// _oView: this view\n\t\t// _aInputFields:\n\t\t// _aMandatoryFields\n\t\t// _oApplicationController: the controller of the App\n\t\t// _oApplicationProperties: json model containing the App state\n\t\t// _oResourceBundle: the resource bundle to retrieve texts from\n\t\t// _oHelper: singleton instance of nw.epm.refapps.ext.prod.manage.util.Products used to call backend services\n\t\t// _oSubControllerForShare: helper for the share dialog\n\t\t// _oSubcategory: input field for the subcategory\n\t\t// _oShareDialog: dialog for the share button. Initialized on demand.\n\n\t\t// --- attributes describing the current state\n\t\t// _sContextPath:\n\n\t\t// --- Initialization\n\n\t\tonInit: function() {\n\t\t\t// Gets the application component and the data operation helper instance\n\t\t\t\t\t\talert(\"this is init\");\n\t\t\tthis._oView = this.getView();\n\t\t\tthis._initViewPropertiesModel();\n\t\t\tvar oComponent = this.getOwnerComponent();\n\t\t\tthis._oApplicationProperties = oComponent.getModel(\"appProperties\");\n\t\t\tthis._oApplicationController = this._oApplicationProperties.getProperty(\"/applicationController\");\n\t\t\tthis._oResourceBundle = oComponent.getModel(\"i18n\").getResourceBundle();\n\t\t\tthis._oHelper = this._oApplicationController.getODataHelper();\n\t\t\tthis._oSubControllerForShare = new SubControllerForShare(this._oView, this._oResourceBundle);\n\t\t\tthis._oCategory = this.byId(\"categoryBox\");\n\t\t\tthis._oSubcategory = this.byId(\"subcategoryBox\");\n\t\t\t// Gets and stores array of input fields and mandatory fields\n\t\t\tthis._aMandatoryFields = this._getMandatoryFields();\n\t\t\tthis._aInputFields = this._aMandatoryFields.concat(this._getNonMandatoryInputFields());\n\n\t\t\t// Initialize the Sub-View which included the sap.m.UploadCollection control to handle uploading and removing\n\t\t\t// images\n\t\t//\tthis._initSubViewImageUpload();\n\n\t\t\tvar oModel = oComponent.getModel();\n\t\t\t// This facilitates the value help generated from annotations only\n\t\t\toModel.attachMetadataLoaded(function() {\n\t\t\t\tvar oInput = this.byId(\"supplierInput\"),\n\t\t\t\t\toMetadataAnalyzer = new MetadataAnalyser(oModel),\n\t\t\t\t\tsField = \"SupplierName\",\n\t\t\t\t\tmConfig = oComponent.getMetadata().getConfig(),\n\t\t\t\t\tsServiceName = mConfig.serviceConfig.name,\n\t\t\t\t\tsAnnotationPath = sServiceName + \".ProductDraft/\" + sField,\n\t\t\t\t\toValueListAnnotations = oMetadataAnalyzer.getValueListAnnotation(sAnnotationPath);\n\n\t\t\t\tif (oInput) {\n\t\t\t\t\t// This is created for side effects Search Help Dialog\n\t\t\t\t\t/* eslint-disable */\n\t\t\t\t\tnew ValueHelpProvider({\n\t\t\t\t\t\tannotation: oValueListAnnotations.primaryValueListAnnotation,\n\t\t\t\t\t\tadditionalAnnotations: oValueListAnnotations.additionalAnnotations,\n\t\t\t\t\t\tcontrol: oInput,\n\t\t\t\t\t\tmodel: oModel,\n\t\t\t\t\t\tpreventInitialDataFetchInValueHelpDialog: true,\n\t\t\t\t\t\tsupportMultiSelect: false,\n\t\t\t\t\t\tsupportRanges: false,\n\t\t\t\t\t\tfieldName: sField,\n\t\t\t\t\t\ttitle: sField\n\t\t\t\t\t});\n\t\t\t\t\t/* eslint-enable */\n\t\t\t\t\toInput.setShowValueHelp(true);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t\n\n\t\t},\n\n\t\t_initViewPropertiesModel: function() {\n\t\t\t// The model created here is used to set values or view element properties that cannot be bound\n\t\t\t// directly to the OData service. Setting view element attributes by binding them to a model is preferable to the\n\t\t\t// alternative of getting each view element by its ID and setting the values directly because a JSon model is more\n\t\t\t// robust if the customer removes view elements (see extensibility).\n\t\t\tthis._oViewProperties = new JSONModel({\n\t\t\t\tdataLoaded: false\n\t\t\t});\n\t\t\tthis._oView.setModel(this._oViewProperties, \"viewProperties\");\n\t\t},\n\n\t\t_getMandatoryFields: function() {\n\t\t\treturn fnArrayFilteredTruthy([this.byId(\"productNameInput\"), this.byId(\"priceInput\"), this.byId(\"currencyBox\"),\n\t\t\t\tthis._oCategory, this._oSubcategory, this.byId(\"descriptionArea\"),\n\t\t\t\tthis.byId(\"supplierInput\"), this.byId(\"unitOfMeasureBox\")\n\t\t\t]);\n\t\t},\n\n\t\t_getNonMandatoryInputFields: function() {\n\t\t\treturn fnArrayFilteredTruthy([this.byId(\"lengthInput\"), this.byId(\"widthInput\"), this.byId(\"heightInput\"), this.byId(\"weightInput\")]);\n\t\t},\n\n\t\t// helper method to set image upload control\n\t\t_initSubViewImageUpload: function() {\n\t\t\tvar oSubViewImagesUpload = this.byId(\"View_ImageUpload\");\n\t\t\tif (oSubViewImagesUpload) {\n\t\t\t\toSubViewImagesUpload.getController().setInitData({\n\t\t\t\t\toResourceBundle: this._oResourceBundle,\n\t\t\t\t\toDataHelper: this._oHelper,\n\t\t\t\t\tfnDirty: this._setDirty.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\n\t\t// --- Lifecycle methods used by the hosting view\n\n\t\tshow: function() {\n\t\t\talert(\"this is show\");\n\t\t\tvar sProductDraftID = this._oApplicationProperties.getProperty(\"/productId\");\n\t\t\tthis._oViewProperties.setProperty(\"/dataLoaded\", false);\n\t\t\tthis._resetValueStates();\n\n\t\t\tthis._sContextPath = this._oHelper.getPathForDraftId(sProductDraftID);\n\t\t\t// Binds the (newly generated) product draft to the view and expands the Images part for the subview\n\t\t\t// ProductDraftUploadImages\n\t\t\tthis._oView.bindElement(this._sContextPath, {\n\t\t\t\texpand: \"Images\"\n\t\t\t});\n\n\t\t\t// Checks if the binding context is already available locally. If so, refreshes the binding and retrieves the\n\t\t\t// data from backend again.\n\t\t\tvar oBindingContext = this._oView.getBindingContext();\n\t\t\tif (oBindingContext && oBindingContext.getPath() === this._sContextPath) {\n\t\t\t\tthis._oView.getElementBinding().refresh();\n\t\t\t}\n\n\t\t\t// Updates header and footer after the product draft is retrieved\n\t\t\tthis._oView.getElementBinding().attachEventOnce(\n\t\t\t\t\"dataReceived\",\n\t\t\t\tfunction() {\n\t\t\t\t\toBindingContext = this._oView.getBindingContext();\n\t\t\t\t\tif (oBindingContext) {\n\t\t\t\t\t\t// Sets the draft dirty flag based on the backend information\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isDirty\", oBindingContext.getProperty(\"IsDirty\"));\n\n\t\t\t\t\t\tthis._oViewProperties.setProperty(\"/dataLoaded\", true);\n\t\t\t\t\t\t// in ComboBox\n\t\t\t\t\t\tthis._setCategoryFilter(oBindingContext);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Handle the case if the product draft cannot be retrieved remotely (e.g. it's deleted already)\n\t\t\t\t\t\t// show the corresponding product detail page, since in this app the draft id is supposed to be\n\t\t\t\t\t\t// same as the product id\n\t\t\t\t\t\tthis._oApplicationController.showProductDetailPage(sProductDraftID);\n\t\t\t\t\t}\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isBusyCreatingDraft\", false);\n\t\t\t\t}, this);\n\t\t},\n\n\t\tleave: function() {\n\t\t\tthis._oView.unbindElement();\n\t\t},\n\n\t\t// --- Event handlers attached declaratively\n\n\t\tonSavePressed: function() {\n\t\t\tif (!this._checkAndMarkEmptyMandatoryFields() && !this._fieldWithErrorState()) {\n\t\t\t\tvar fnDraftSaved = function(oControl, oResponse) {\n\t\t\t\t\t\t// When the batch of requests in oData V2 is successfully sent to the backend,\n\t\t\t\t\t\t// the mParameters.success in submitChanges is called. Errors relating to the\n\t\t\t\t\t\t// requests within the batch are not indicated separately and therefore the system must\n\t\t\t\t\t\t// check the requests contained in the batch for errors based on the request response.\n\t\t\t\t\t\t// Makes the assumption that the error returned relates to the field that has been\n\t\t\t\t\t\t// changed. This is not always the case and errors are shown in valueStateText\n\t\t\t\t\t\t// for the field that triggered the save of the draft.\n\t\t\t\t\t\tfor (var i = 0; i < oResponse.__batchResponses.length; i++) {\n\t\t\t\t\t\t\tif (oResponse.__batchResponses[i].response) {\n\t\t\t\t\t\t\t\tif (jQuery.sap.startsWith(oResponse.__batchResponses[i].response.body, \"{\\\"error\\\":\")) {\n\t\t\t\t\t\t\t\t\tvar oErrModel = new JSONModel();\n\t\t\t\t\t\t\t\t\toErrModel.setJSON(oResponse.__batchResponses[i].response.body);\n\t\t\t\t\t\t\t\t\tvar sMessage = oErrModel.getProperty(\"/error/message/value\");\n\t\t\t\t\t\t\t\t\tif (oControl) {\n\t\t\t\t\t\t\t\t\t\toControl.setValueState(\"Error\");\n\t\t\t\t\t\t\t\t\t\toControl.setValueStateText(sMessage);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// Just take the first error message found\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t},\n\t\t\t\t\tfnAfterActivation = function(oProductData) {\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/masterBusyIndicatorDelay\", 0);\n\t\t\t\t\t\tthis._oApplicationController.showProductDetailPage(oProductData.Id, true);\n\t\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/isBusySaving\", false);\n\t\t\t\t\t\tvar sMessage = this._oResourceBundle.getText(\"ymsg.saveText\", oProductData.Name);\n\t\t\t\t\t\tsap.ui.require([\"sap/m/MessageToast\"], function(MessageToast) {\n\t\t\t\t\t\t\tMessageToast.show(sMessage);\n\t\t\t\t\t\t});\n\t\t\t\t\t}.bind(this);\n\t\t\t\tthis._oHelper.activateProduct(fnDraftSaved, fnAfterActivation);\n\t\t\t}\n\t\t},\n\n\t\tonCancelPressed: function() {\n\t\t\tvar oDraft = this._oView.getBindingContext().getObject(),\n\t\t\t\tfnNavToProductDetail = function() {\n\t\t\t\t\tthis._oApplicationProperties.setProperty(\"/detailBusyIndicatorDelay\", null);\n\t\t\t\t\t// The system must distinguish between CANCEL chosen in EDIT mode and CANCEL chosen in ADD mode\n\t\t\t\t\t// because Cancel Edit navigates to display of that product and Cancel Add to the previously\n\t\t\t\t\t// selected product\n\t\t\t\t\tvar bIsNew = oDraft.IsNewProduct,\n\t\t\t\t\t\tsProductId = bIsNew ? (!Device.system.phone && this._oApplicationProperties.getProperty(\"/lastDisplay\")) : oDraft.ProductId;\n\t\t\t\t\tif (sProductId) {\n\t\t\t\t\t\tthis._oApplicationController.showProductDetailPage(sProductId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._oApplicationController.navToMaster();\n\t\t\t\t\t}\n\t\t\t\t}.bind(this);\n\t\t\tthis._deleteProductDraft(fnNavToProductDetail);\n\t\t},\n\n\t\tonSharePressed: function(oEvent) {\n\t\t\tthis._oSubControllerForShare.openDialog(oEvent);\n\t\t},\n\n\t\tonNavButtonPress: function() {\n\t\t\tthis._oApplicationController.navBack(true);\n\t\t},\n\n\t\t// deleteProductDraft is used in this controller to cancel editing and when\n\t\t// the active product has been updated or created.\n\t\t_deleteProductDraft: function(fnAfterDeleted, fnDeleteCanceled) {\n\t\t\tthis._oHelper.deleteProductDraft(this._sContextPath, fnAfterDeleted, fnDeleteCanceled);\n\t\t},\n\n\t\t// --- Input fields\n\n\t\tonNumberChange: function(oEvent) {\n\t\t\t// If a number field is empty, an error occurs in the backend.\n\t\t\t// So this sets a missing number to \"0\".\n\t\t\tvar oField = oEvent.getSource(),\n\t\t\t\tsNumber = oField.getValue();\n\t\t\tif (sNumber === \"\") {\n\t\t\t\toField.setValue(\"0\");\n\t\t\t}\n\t\t\tthis._fieldChange(oField);\n\t\t},\n\n\t\tonCategoryChange: function(oEvent) {\n\t\t\t// Do not use submitChanges because the subcategory determines the category and both\n\t\t\t// end up being blank. Only use submitChanges after the subcategory has been changed.\n\t\t\toEvent.getSource().setValueState(ValueState.None);\n\t\t\tthis._setCategoryFilter(this._oView.getBindingContext());\n\t\t},\n\n\t\tonInputChange: function(oEvent) {\n\t\t\t// Whenever the value of an input field is changed, the system must\n\t\t\t// update the product draft. For most of the fields, no specific\n\t\t\t// processing is required on the update of the product draft. onInputChange is the\n\t\t\t// change event defined in the XML view for such fields.\n\t\t\tvar oField = oEvent.getSource();\n\t\t\t// Workaround to ensure that both the supplier Id and Name are updated in the model before the\n\t\t\t// draft is updated, otherwise only the Supplier Name is saved to the draft and Supplier Id is lost\n\t\t\tsetTimeout(function() {\n\t\t\t\tthis._fieldChange(oField);\n\t\t\t}.bind(this), 0);\n\t\t\t\n\t\t\talert(\"this is input change\");\n\t\t},\n\n\t\tonSubcategoryChange: function(oEvent) {\n\t\t\tvar sValue = this._oSubcategory.getValue();\n\t\t\tif (!sValue.trim()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._oCategory) {\n\t\t\t\tthis._oCategory.setValueState(ValueState.None);\n\t\t\t\tvar oSelectedItem = oEvent.getParameter(\"selectedItem\"),\n\t\t\t\t\toBindingContext = oSelectedItem.getBindingContext(),\n\t\t\t\t\tsMainCategory = oBindingContext.getProperty(\"MainCategoryId\");\n\t\t\t\tif (sMainCategory !== this._oCategory.getValue()) {\n\t\t\t\t\tthis._oCategory.setValue(sMainCategory);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._fieldChange(this._oSubcategory);\n\t\t},\n\n\t\tonSelectChange: function() {\n\t\t\t// Collect input controls.\n\t\t\t// Additional method for change event on SelectChanges because there is currently\n\t\t\t// no value status for a select field.\n\t\t\tthis._setDirty();\n\t\t\tthis._oHelper.saveSelectProductDraft();\n\t\t},\n\n\t\t// This method has been defined in the XML view and is required by UI5 to call\n\t\t// the Suggestions \"type ahead\" function\n\t\tsuggestMethod: function(oEvent) {\n\t\t\tsap.m.InputODataSuggestProvider.suggest(oEvent);\n\t\t},\n\n\t\t// Values states if set are not automatically removed from the view.  For example, if there\n\t\t// are missing mandatory fields and the user presses \"save\", these fields are set to value state\n\t\t// error.  If the user then presses \"cancel\" and selects another product to edit, the values states\n\t\t// must be removed, otherwise the value states appear on the next product edit.\n\t\t_resetValueStates: function() {\n\t\t\tjQuery.each(this._aInputFields, function(i, input) {\n\t\t\t\tinput.setValueState(ValueState.None);\n\t\t\t});\n\t\t},\n\n\t\t_fieldWithErrorState: function() {\n\t\t\treturn this._aInputFields.some(function(input) {\n\t\t\t\treturn (input.getValueState() === ValueState.Error);\n\t\t\t});\n\t\t},\n\n\t\t_fieldChange: function(oControl) {\n\t\t\t// Handler for a changed field that needs to be written to the draft.  This allows\n\t\t\t// specific processing for the \"Change\" event on the input fields, such as for numbers\n\t\t\t// to set empty to \"0\".\n\t\t\tthis._setDirty();\n\t\t\t// Removes previous error state\n\t\t\toControl.setValueState(ValueState.None);\n\t\t\t// Callback function in the event that saving draft is unsuccessful\n\t\t\tvar fnSubmitDraftSuccess = function(sMessage) {\n\t\t\t\tif (sMessage && oControl) {\n\t\t\t\t\toControl.setValueState(\"Error\");\n\t\t\t\t\toControl.setValueStateText(sMessage);\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis._oHelper.saveProductDraft(fnSubmitDraftSuccess);\n\t\t},\n\n\t\t// Set the empty mandatory fields to Value State Error\n\t\t// Return whether at least one mandatory field is still empty\n\t\t_checkAndMarkEmptyMandatoryFields: function() {\n\t\t\tvar bErrors = false;\n\t\t\t// Check that inputs are not empty or space.\n\t\t\t// This does not happen during data binding because this is only triggered by changes.\n\t\t\t// Note that this loop must not stop with the first found error, since for all mandatory fields the value state must be updated.\n\t\t\tjQuery.each(this._aMandatoryFields, function(i, input) {\n\t\t\t\tif (!input.getValue() || input.getValue().trim() === \"\") {\n\t\t\t\t\tbErrors = true;\n\t\t\t\t\tinput.setValueState(ValueState.Error);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn bErrors;\n\t\t},\n\n\t\t_setCategoryFilter: function(oBindingContext) {\n\t\t\tif (this._oSubcategory) {\n\t\t\t\tvar sMainCatgId = oBindingContext.getProperty(\"MainCategoryId\"),\n\t\t\t\tsSubCatgId = oBindingContext.getProperty(\"SubCategoryId\"),\n\t\t\t\t\taFilters = sMainCatgId ? [new Filter(\"MainCategoryName\", FilterOperator.StartsWith, sMainCatgId)] : [],\n\t\t\t\t\toBinding = this._oSubcategory.getBinding(\"items\");\n\t\t\t\tif (sMainCatgId) {\n\t\t\t\t\toBinding.attachEventOnce(\"change\", function() {\n\t\t\t\t\t\tvar aBindings = oBinding.getContexts(),\n\t\t\t\t\t\t\tbIsValueValid = aBindings.some(function(oEntry) {\n\t\t\t\t\t\t\t\treturn sSubCatgId === oEntry.getProperty(\"Id\");\n\t\t\t\t\t\t\t}).bind(this);\n\t\t\t\t\t\tif (!bIsValueValid) {\n\t\t\t\t\t\t\tthis._oSubcategory.setValue(\" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this);\n\t\t\t\t} else {\n\t\t\t\t\tthis._oSubcategory.setValue(\" \");\n\t\t\t\t}\n\t\t\t\toBinding.filter(aFilters, FilterType.Application);\n\t\t\t}\n\t\t},\n\n\t\t_setDirty: function() {\n\t\t\tthis._oApplicationProperties.setProperty(\"/isDirty\", true);\n\t\t}\n\t});\n});",
		"whatever/controller/messages.js": "sap.ui.define([\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"./utilities\"\n], function(MessageBox, JSONModel, utilities) {\n\t\"use strict\";\n\n\tfunction fnExtractErrorMessageFromDetails(sDetails) {\n\t\tif (jQuery.sap.startsWith(sDetails || \"\", \"{\\\"error\\\":\")) {\n\t\t\tvar oErrModel = new JSONModel();\n\t\t\toErrModel.setJSON(sDetails);\n\t\t\treturn oErrModel.getProperty(\"/error/message/value\") || \"Error\";\n\t\t}\n\t}\n\n\tfunction fnParseError(oParameter) {\n\t\tvar oParameters = null,\n\t\t\toResponse = null,\n\t\t\toError = {};\n\n\t\t// \"getParameters\": for the case of catching oDataModel \"requestFailed\" event\n\t\toParameters = oParameter.getParameters ? oParameter.getParameters() : null;\n\t\t// \"oParameters.response\": V2 interface, response object is under the getParameters()\n\t\t// \"oParameters\": V1 interface, response is directly in the getParameters()\n\t\t// \"oParameter\" for the case of catching request \"onError\" event\n\t\toResponse = oParameters ? (oParameters.response || oParameters) : oParameter;\n\t\toError.sDetails = oResponse.responseText || oResponse.body || (oResponse.response && oResponse.response.body) || \"\"; //\"onError\" Event: V1 uses response and response.body\n\t\toError.sMessage = fnExtractErrorMessageFromDetails(oError.sDetails) || oResponse.message || (oParameters && oParameters.message);\n\t\treturn oError;\n\t}\n\n\tfunction fnShowMessageBox(sTitle, sMessageHeader, sMessageDetails) {\n\n\t\tMessageBox.show(sMessageHeader, {\n\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\ttitle: sTitle,\n\t\t\tdetails: sMessageDetails,\n\t\t\tactions: MessageBox.Action.CLOSE,\n\t\t\tstyleClass: utilities.getContentDensityClass()\n\t\t});\n\n\t}\n\n\treturn {\n\t\t// Show an error dialog with information from the oData response object.\n\t\t// oParameter - The object containing error information\n\t\tshowErrorMessage: function(oParameter, oView) {\n\t\t\tvar oErrorDetails = fnParseError(oParameter),\n\t\t\t\toBundle = oView.getModel(\"i18n\").getResourceBundle(),\n\t\t\t\tsTitle = oBundle.getText(\"xtit.error\");\n\t\t\tfnShowMessageBox(sTitle, oErrorDetails.sMessage, oErrorDetails);\n\t\t\t/*\n\t\t\tMessageBox.show(oErrorDetails.sMessage, {\n\t\t\t\ticon: MessageBox.Icon.ERROR,\n\t\t\t\ttitle: sTitle,\n\t\t\t\tdetails: oErrorDetails.sDetails,\n\t\t\t\tactions: MessageBox.Action.CLOSE,\n\t\t\t\tstyleClass: utilities.getContentDensityClass()\n\t\t\t});*/\n\t\t},\n\n\t\tshowXMLErrorMessage: function(oParameter, oView) {\n\t\t\t// Errors from upload control are in xml format as default because the requests expect other formats \n\t\t\t// in the header for pictures\n\n\t\t\t// xml is parsed using jQuery, then passed to jQuery object\n\t\t\ttry {\n\t\t\t\tvar xmlDoc = jQuery.parseXML(oParameter);\n\t\t\t\tvar xml = jQuery(xmlDoc);\n\t\t\t} catch (e) {\n\t\t\t\tjQuery.sap.log.error(e);\n\t\t\t}\n\n\t\t\tif (xml) {\n\t\t\t\tvar sMessageHeader = xml.find(\"errordetails\").find(\"message\").text();\n\t\t\t\tvar sMessageDetails = xml.find(\"error\").find(\"message\").text();\n\t\t\t} else {\n\t\t\t\t// Just in case that the Error from request could not be parsed\n\t\t\t\tsMessageHeader = oParameter;\n\t\t\t}\n\n\t\t\tvar oBundle = oView.getModel(\"i18n\").getResourceBundle(),\n\t\t\t\tsTitle = oBundle.getText(\"xtit.error\");\n\t\t\tfnShowMessageBox(sTitle, sMessageHeader, sMessageDetails);\n\t\t},\n\n\t\tgetErrorContent: function(oParameter) {\n\t\t\treturn fnParseError(oParameter).sMessage;\n\t\t},\n\n\t\tgetErrorDetails: function(oParameter) {\n\t\t\treturn fnParseError(oParameter).sDetails;\n\t\t},\n\n\t\textractErrorMessageFromDetails: function(sDetails) {\n\t\t\treturn fnExtractErrorMessageFromDetails(sDetails);\n\t\t}\n\t};\n});",
		"whatever/controller/TableOperations.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterType\",\n\t\"sap/ui/model/FilterOperator\"\n], function(Object, Sorter, Filter, FilterType, FilterOperator) {\n\t\"use strict\";\n\n\treturn Object.extend(\"nw.epm.refapps.ext.prod.manage.util.TableOperations\", {\n\t\t// Object holding the active sorters of a list. It is used to make sure that\n\t\t// setting a new sorter with \"sort list\" does not break a sorting that was\n\t\t// previously set by \"grouping\".\n\t\t// When the list is sorted or grouped the list of sorters that is applied to\n\t\t// the binding is built by concatenating oGrouper and aSortList of this\n\t\t// object into one array.\n\t\t// Sorting and grouping is done with the following rules:\n\t\t// 1. selecting a sorter on the table adds the new sorter as the main sorter\n\t\t// to all existing sorters\n\t\t// 2. if grouping and sorting are both set for the same attribute then the\n\t\t// direction (ascending/descending) has to be aligned\n\t\t// The search related attributes are public because there is no special\n\t\t// logic for setting them so they can be used directly.\n\n\t\tconstructor: function(oTable, aSearchableFields, oDefaultSorter) {\n\t\t\t// Storage of the active grouping and sorting is private because\n\t\t\t// of their interdependency\n\t\t\tvar sSearchTerm = \"\",\n\t\t\t\toGrouper = null,\n\t\t\t\taFilterList = [],\n\t\t\t\taSearchFilter = [],\n\t\t\t\tbGroupingChanged = false,\n\t\t\t\tbSearchChanged = false,\n\t\t\t\tbFilterChanged = false,\n\t\t\t\tbSortChanged = false,\n\t\t\t\taSortList = [(oDefaultSorter) ? oDefaultSorter : new Sorter(\"Name\", false)],\n\t\t\t\toFilterDict = {};\n\n\t\t\tthis._resetChangeIndicators = function() {\n\t\t\t\tbGroupingChanged = false;\n\t\t\t\tbSearchChanged = false;\n\t\t\t\tbFilterChanged = false;\n\t\t\t\tbSortChanged = false;\n\t\t\t};\n\n\t\t\tthis.addSorter = function(oSorter) {\n\t\t\t\t// Delete any existing sorter for the path specified\n\t\t\t\tvar i = this._getSortListIndexByPath(oSorter.sPath);\n\t\t\t\tif (i !== -1) {\n\t\t\t\t\taSortList.splice(i, 1);\n\t\t\t\t}\n\t\t\t\t// The latest sorter is always the \"main\" sorter -> add it to the\n\t\t\t\t// beginning of the array\n\t\t\t\taSortList.unshift(oSorter);\n\t\t\t\t// Copy the sort order of the new sorter to the grouper if they\n\t\t\t\t// refer to the same path\n\t\t\t\tif (oGrouper && oGrouper.sPath === oSorter.sPath) {\n\t\t\t\t\toGrouper.bDescending = oSorter.bDescending;\n\t\t\t\t}\n\t\t\t\tbSortChanged = true;\n\t\t\t};\n\t\t\tthis.setGrouping = function(oNewGrouper) {\n\t\t\t\t// If there is already a sorter for the path specified, the sorting order\n\t\t\t\t// must be the same as in the new grouper\n\t\t\t\tvar i = this._getSortListIndexByPath(oNewGrouper.sPath);\n\t\t\t\tif (i !== -1) {\n\t\t\t\t\taSortList[i].bDescending = oNewGrouper.bDescending;\n\t\t\t\t}\n\t\t\t\toGrouper = oNewGrouper;\n\t\t\t\tbGroupingChanged = true;\n\t\t\t};\n\n\t\t\tthis._getSortListIndexByPath = function(sPath) {\n\t\t\t\tvar i;\n\t\t\t\tfor (i = 0; i < aSortList.length; i++) {\n\t\t\t\t\tif (aSortList[i].sPath === sPath) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn -1;\n\t\t\t};\n\t\t\tthis.removeGrouping = function() {\n\t\t\t\toGrouper = null;\n\t\t\t\tbGroupingChanged = true;\n\t\t\t};\n\t\t\tthis.getGrouping = function() {\n\t\t\t\treturn oGrouper;\n\t\t\t};\n\t\t\tthis.getSorter = function() {\n\t\t\t\treturn aSortList;\n\t\t\t};\n\t\t\tthis.resetFilters = function() {\n\t\t\t\taFilterList.length = 0;\n\t\t\t\toFilterDict = {};\n\t\t\t\tbFilterChanged = true;\n\t\t\t};\n\t\t\tthis.addFilter = function(oFilter, sFilterAttribute) {\n\t\t\t\tif (oFilterDict[sFilterAttribute]) {\n\t\t\t\t\t// there is already at least one filter for this attribute -> add the new filter to the list\n\t\t\t\t\toFilterDict[sFilterAttribute].push(oFilter);\n\t\t\t\t} else {\n\t\t\t\t\t// there is no filter for this attribute yet -> add the new filter attribute to the dictionary\n\t\t\t\t\toFilterDict[sFilterAttribute] = [oFilter];\n\t\t\t\t}\n\t\t\t\t// now build the filter list - filters referring to the same attribute are connected by OR all\n\t\t\t\t// other filters are connected by AND (-> the default filter setting)\n\t\t\t\taFilterList.length = 0;\n\t\t\t\tfor (var prop in oFilterDict) {\n\t\t\t\t\tif (oFilterDict[prop].length > 1) {\n\t\t\t\t\t\taFilterList.push(new Filter(oFilterDict[prop], false));\n\t\t\t\t\t} else {\n\t\t\t\t\t\taFilterList.push(oFilterDict[prop][0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbFilterChanged = true;\n\t\t\t};\n\n\t\t\tthis.getFilterTable = function() {\n\t\t\t\treturn (aFilterList && aFilterList.length > 0) ? aFilterList : null;\n\t\t\t};\n\n\t\t\tthis.setSearchTerm = function(sNewSearchTerm) {\n\t\t\t\t// Searching may be done in more than one column - therefore a filter for\n\t\t\t\t// each of the searchable columns has to be created\n\t\t\t\taSearchFilter.length = 0;\n\t\t\t\tif (sNewSearchTerm) {\n\t\t\t\t\tsSearchTerm = sNewSearchTerm;\n\t\t\t\t\tfor (var i = 0; i < aSearchableFields.length; i++) {\n\t\t\t\t\t\taSearchFilter.push(new Filter(aSearchableFields[i], FilterOperator.Contains, sNewSearchTerm));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//the search term is empty -> remove the search\n\t\t\t\t\tsSearchTerm = \"\";\n\t\t\t\t\taSearchFilter.length = 0;\n\t\t\t\t}\n\t\t\t\tbSearchChanged = true;\n\t\t\t};\n\n\t\t\tthis.getSearchTerm = function() {\n\t\t\t\treturn sSearchTerm;\n\t\t\t};\n\n\t\t\tthis.applyTableOperations = function() {\n\t\t\t\t// Here the binding of the table items is updated with the currently active sorters and filters.\n\t\t\t\t// It is assumed that all changes done by the user are immediately reflected in the table.\n\t\t\t\t// That means there is always just one change at a time.\n\t\t\t\tvar aActiveSorters = [],\n\t\t\t\t\taActiveFilters = [],\n\t\t\t\t\toTableBinding = oTable.getBinding(\"items\");\n\n\t\t\t\tif (oTableBinding) {\n\t\t\t\t\tif (bGroupingChanged || bSortChanged) {\n\t\t\t\t\t\t// The grouping or sorting of the table has changed. The sorting on the binding needs to be updated.\n\t\t\t\t\t\t// Note that the sorter of the grouping has to be the first one in the list of sorters that is added\n\t\t\t\t\t\t// to the binding\n\t\t\t\t\t\tif (oGrouper) {\n\t\t\t\t\t\t\taActiveSorters.push(oGrouper);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (aSortList.length > 0) {\n\t\t\t\t\t\t\taActiveSorters = aActiveSorters.concat(aSortList);\n\t\t\t\t\t\t}\n\t\t\t\t\t\toTableBinding.sort(aActiveSorters);\n\t\t\t\t\t}\n\t\t\t\t\tif (bSearchChanged || bFilterChanged) {\n\t\t\t\t\t\t//the filters that origin from entries in a sarch field and the ones that are set e.g. by a\n\t\t\t\t\t\t// filter bar need to be applied together.\n\t\t\t\t\t\t// Note that if the search is done in more than one column then the corresponding filters have\n\t\t\t\t\t\t// to be connected using \"or\". All other filters are connected using \"and\" logic.\n\n\t\t\t\t\t\tif (aSearchFilter.length > 0) {\n\t\t\t\t\t\t\taActiveFilters.push(new Filter(aSearchFilter, false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (aFilterList.length > 0) {\n\t\t\t\t\t\t\taActiveFilters.push(new Filter(aFilterList, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\toTableBinding.filter(aActiveFilters.length > 0 && new Filter(aActiveFilters, true));\n\t\t\t\t\t}\n\t\t\t\t\tthis._resetChangeIndicators();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n});",
		"whatever/model/formatter.js": "sap.ui.define([], function() {\n\t\"use strict\";\n\n\treturn {\n\t\t/**\n\t\t * Rounds the currency value to 2 digits\n\t\t *\n\t\t * @public\n\t\t * @param {string} sValue value to be formatted\n\t\t * @returns {string} formatted currency value with 2 digits\n\t\t */\n\t\tcurrencyValue: function(sValue) {\n\t\t\tif (!sValue) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\treturn parseFloat(sValue).toFixed(2);\n\t\t}\n\t};\n\n});",
		"whatever/view/Master.view.xml": "<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\" xmlns:semantic=\"sap.m.semantic\" controllerName=\"whatever.controller.Master\">\n\t<semantic:MasterPage id=\"page\" title=\"Coin Turtle\" navButtonPress=\"onNavBack\" showNavButton=\"true\">\n\t\t<semantic:subHeader>\n\t\t\t<Bar id=\"headerBar\">\n\t\t\t<contentLeft>\n\t\t\t    <Button width=\"50px\" id=\"__button0\" icon=\"sap-icon://home\" press=\"onHomeClicked\"/>\n\t\t\t    <Button width=\"50px\" id=\"__button1\" icon=\"sap-icon://collaborate\" press=\"onCommunityClicked\"/>\n\t\t\t    <Button width=\"50px\" id=\"__button3\" icon=\"sap-icon://favorite\" press=\"onFriendsClicked\"/>\n\t\t\t    <Button width=\"100px\" id=\"__button2\" icon=\"sap-icon://account\" press=\"onMeClicked\"/>\n\t\t\t</contentLeft>\n\t\t\t</Bar>\n\t\t</semantic:subHeader>\n\t\t<semantic:content>\n\t\t\t<!-- For client side filtering add this to the items attribute:  parameters: {operationMode: 'Client'}}\" -->\n\t\t\t<List id=\"list\" items=\"{ path: '/Products', sorter: { path: 'Name', descending: false }, groupHeaderFactory: '.createGroupHeader' }\" busyIndicatorDelay=\"{masterView>/delay}\" noDataText=\"{masterView>/noDataText}\" mode=\"{= ${device>/system/phone} ? 'None' : 'SingleSelectMaster'}\" growing=\"true\" growingScrollToLoad=\"true\" updateFinished=\"onUpdateFinished\" selectionChange=\"onSelectionChange\">\n\t\t\t\t<infoToolbar>\n\t\t\t\t\t<Toolbar active=\"true\" id=\"filterBar\" visible=\"{masterView>/isFilterBarVisible}\" press=\"onOpenViewSettings\">\n\t\t\t\t\t\t<Title id=\"filterBarLabel\" text=\"{masterView>/filterBarLabel}\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</infoToolbar>\n\t\t\t\t<items>\n\t\t\t\t\t<ObjectListItem type=\"{= ${device>/system/phone} ? 'Active' : 'Inactive'}\" press=\"onSelectionChange\" title=\"{Name}\" numberUnit=\"{Id}\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t\t<Button text=\"Card \" width=\"100px\" id=\"__button4\" activeIcon=\"sap-icon://add\" icon=\"sap-icon://add\" press=\"onAdd\"/>\n\t\t\t<Button text=\"Photo\" width=\"100px\" id=\"__button6\" icon=\"sap-icon://add\" press=\"onClickTakePhoto\"/>\n\t\t\t<Button text=\"Cash\" width=\"100px\" id=\"__button5\" icon=\"sap-icon://money-bills\" press=\"onClickCashButton\"/>\n\t\t</semantic:content>\n\t</semantic:MasterPage>\n</mvc:View>",
		"whatever/model/GroupSortState.js": "sap.ui.define([\n\t\"sap/ui/base/Object\",\n\t\"sap/ui/model/Sorter\"\n], function(BaseObject, Sorter) {\n\t\"use strict\";\n\n\treturn BaseObject.extend(\"whatever.model.GroupSortState\", {\n\n\t\t/**\n\t\t * Creates sorters and groupers for the master list.\n\t\t * Since grouping also means sorting, this class modifies the viewmodel.\n\t\t * If a user groups by a field, and there is a corresponding sort option, the option will be chosen.\n\t\t * If a user ungroups, the sorting will be reset to the default sorting.\n\t\t * @class\n\t\t * @public\n\t\t * @alias whatever.model.GroupSortState\n\t\t */\n\t\tconstructor: function(oViewModel, fnGroupFunction) {\n\t\t\tthis._oViewModel = oViewModel;\n\t\t\tthis._fnGroupFunction = fnGroupFunction;\n\t\t},\n\n\t\t/**\n\t\t * Sorts by Name, or by \n\t\t *\n\t\t * @param sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tsort: function(sKey) {\n\t\t\tvar sGroupedBy = this._oViewModel.getProperty(\"/groupBy\");\n\n\t\t\tif (sGroupedBy !== \"None\") {\n\t\t\t\t// If the list is grouped, remove the grouping since the user wants to sort by something different\n\t\t\t\t// Grouping only works if the list is primary sorted by the grouping - the first sorten contains a grouper function\n\t\t\t\tthis._oViewModel.setProperty(\"/groupBy\", \"None\");\n\t\t\t}\n\n\t\t\treturn [new Sorter(sKey, false)];\n\t\t},\n\n\t\t/**\n\t\t * Groups by , or resets the grouping for the key \"None\"\n\t\t *\n\t\t * @param sKey - the key of the field used for grouping\n\t\t * @returns {sap.ui.model.Sorter[]} an array of sorters\n\t\t */\n\t\tgroup: function(sKey) {\n\t\t\tvar aSorters = [];\n\n\t\t\tif (sKey === \"\") {\n\t\t\t\t// Grouping means sorting so we set the select to the same Entity used for grouping\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"\");\n\n\t\t\t\taSorters.push(\n\t\t\t\t\tnew Sorter(\"\", false,\n\t\t\t\t\t\tthis._fnGroupFunction.bind(this))\n\t\t\t\t);\n\t\t\t} else if (sKey === \"None\") {\n\t\t\t\t// select the default sorting again\n\t\t\t\tthis._oViewModel.setProperty(\"/sortBy\", \"Name\");\n\t\t\t}\n\n\t\t\treturn aSorters;\n\t\t}\n\n\t});\n});",
		"whatever/localService/mockserver.js": "sap.ui.define([\n\t\"sap/ui/core/util/MockServer\"\n], function(MockServer) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppModulePath = \"whatever/\",\n\t\t_sJsonFilesModulePath = _sAppModulePath + \"localService/mockdata\";\n\n\treturn {\n\t\t/**\n\t\t * Initializes the mock server.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @public\n\t\t */\n\n\t\tinit: function() {\n\t\t\tvar oUriParameters = jQuery.sap.getUriParameters(),\n\t\t\t\tsJsonFilesUrl = jQuery.sap.getModulePath(_sJsonFilesModulePath),\n\t\t\t\tsManifestUrl = jQuery.sap.getModulePath(_sAppModulePath + \"manifest\", \".json\"),\n\t\t\t\tsEntity = \"Product\",\n\t\t\t\tsErrorParam = oUriParameters.get(\"errorType\"),\n\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500,\n\t\t\t\toManifest = jQuery.sap.syncGetJSON(sManifestUrl).data,\n\t\t\t\toMainDataSource = oManifest[\"sap.app\"].dataSources.mainService,\n\t\t\t\tsMetadataUrl = jQuery.sap.getModulePath(_sAppModulePath + oMainDataSource.settings.localUri.replace(\".xml\", \"\"), \".xml\"),\n\t\t\t\t// ensure there is a trailing slash\n\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\toMockServer = new MockServer({\n\t\t\t\trootUri: sMockServerUrl\n\t\t\t});\n\n\t\t\t// configure mock server with a delay of 1s\n\t\t\tMockServer.config({\n\t\t\t\tautoRespond: true,\n\t\t\t\tautoRespondAfter: (oUriParameters.get(\"serverDelay\") || 1000)\n\t\t\t});\n\n\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\tsMockdataBaseUrl: sJsonFilesUrl,\n\t\t\t\tbGenerateMissingMockData: true\n\t\t\t});\n\n\t\t\tvar aRequests = oMockServer.getRequests(),\n\t\t\t\tfnResponse = function(iErrCode, sMessage, aRequest) {\n\t\t\t\t\taRequest.response = function(oXhr) {\n\t\t\t\t\t\toXhr.respond(iErrCode, {\n\t\t\t\t\t\t\t\"Content-Type\": \"text/plain;charset=utf-8\"\n\t\t\t\t\t\t}, sMessage);\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t// handling the metadata error test\n\t\t\tif (oUriParameters.get(\"metadataError\")) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Handling request errors\n\t\t\tif (sErrorParam) {\n\t\t\t\taRequests.forEach(function(aEntry) {\n\t\t\t\t\tif (aEntry.path.toString().indexOf(sEntity) > -1) {\n\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\toMockServer.start();\n\n\t\t\tjQuery.sap.log.info(\"Running the app with mock data\");\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer: function() {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n});",
		"whatever/model/models.js": "sap.ui.define([\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function(JSONModel, Device) {\n\t\"use strict\";\n\n\treturn {\n\t\tcreateDeviceModel: function() {\n\t\t\tvar oModel = new JSONModel(Device);\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t},\n\n\t\tcreateFLPModel: function() {\n\t\t\tvar fnGetuser = jQuery.sap.getObject(\"sap.ushell.Container.getUser\"),\n\t\t\t\tbIsShareInJamActive = fnGetuser ? fnGetuser().isJamActive() : false,\n\t\t\t\toModel = new JSONModel({\n\t\t\t\t\tisShareInJamActive: bIsShareInJamActive\n\t\t\t\t});\n\t\t\toModel.setDefaultBindingMode(\"OneWay\");\n\t\t\treturn oModel;\n\t\t}\n\t};\n\n});",
		"whatever/view/Detail.view.xml": "<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns:semantic=\"sap.m.semantic\" xmlns:footerbar=\"sap.ushell.ui.footerbar\" controllerName=\"whatever.controller.Detail\" viewName=\"Product Details\">\n\t<semantic:DetailPage id=\"page\" navButtonPress=\"onNavBack\" showNavButton=\"{device>/system/phone}\" title=\"{MainCategoryName} / {SubCategoryName}\" busy=\"{detailView>/busy}\" busyIndicatorDelay=\"{detailView>/delay}\">\n\t\t<semantic:content>\n\n\t<CustomTile id=\"__tile1\">\n\t\t<content>\n\t\t    <Label text=\"Label\" width=\"100%\" id=\"__label0\"/>\n\t\t    <Image width=\"180px\" height=\"250px\" id=\"__image0\" src=\"{ImageUrl}\"/>\n\t\t</content>\n</CustomTile>\n\t\t\t\t<CustomTile id=\"__tile2\">\n\t\t\t\t    <content>\n\t\t\t\t    <List noDataText=\"Drop list items here\" id=\"__list0\" headerText=\"Product Details\">\n\t\t\t\t    <items>\n\t\t\t\t        <StandardListItem type=\"Active\" counter=\"0\" title=\"Date:\" icon=\"sap-icon://calendar\" id=\"__item0\" description=\"{LastModified}\"/>\n\t\t\t\t        <StandardListItem type=\"Active\" counter=\"0\" title=\"Status:\" icon=\"sap-icon://shipping-status\" id=\"__item1\" description=\"{AverageRating}\"/>\n\t\t\t\t        <StandardListItem type=\"Active\" counter=\"0\" title=\"Likes:\" description=\"{RatingCount}\" icon=\"sap-icon://bookmark\" id=\"__item2\"/></items>\n\t\t\t\t</List>\n\t\t\t\t    </content>\n\t\t\t\t</CustomTile>\n<StandardTile title=\"Owner: {Owner}\" info=\"Class Year: 9\" icon=\"{ImageUrl}\" activeIcon=\"sap-icon://customer\" number=\"123\" infoState=\"Success\" id=\"__tile3\" numberUnit=\"points\" press=\"onUserPressed\"/>\n<StandardTile info=\"Quantity: {StockQuantity}\" icon=\"sap-icon://cart-5\" activeIcon=\"sap-icon://customer\" infoState=\"Success\" id=\"__tile0\" number=\"{Price}\" numberUnit=\"{CurrencyCode}\" title=\"Purchased from: {SupplierName}\" removable=\"false\" press=\"onSupplierPressed\"/>\n<UploadCollection fileType=\"undefined\" maximumFilenameLength=\"0\" maximumFileSize=\"0\" mimeType=\"undefined\" id=\"__collection0\">\n    <items>\n        <UploadCollectionItem contributor=\"Contributor1\" fileName=\"fileName1\" fileSize=\"0\" uploadedDate=\"Fri Aug 05 2016\" id=\"__item7\"/></items>\n</UploadCollection>\n<HBox width=\"100%\" id=\"__hbox0\">\n    <items>\n        <ToggleButton text=\"Like\" width=\"100px\" id=\"__likeButton\" press=\"onClickLike\"/>\n        <ToggleButton text=\"Buy\" width=\"100px\" id=\"__BuySellButton\" press=\"onClickBuySell\"/>\n    </items>\n</HBox>\n\n\t<Panel id=\"__panel0\" headerText=\"{Name}\">\n\t\t    <content>\n\t\t        <Text text=\"{Description}\" maxLines=\"10\" id=\"__text4\"/>\n\t\t    </content>\n\t\t</Panel>\n\t\t\t\t\t<Table id=\"CommentsTable\" items=\"{path: '/Comments'}\" noDataText=\"No Comments Found\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<ColumnListItem counter=\"0\" id=\"item1\">\n\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t<Text id=\"text5\" text=\"{Date}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text6\" text=\"{Name}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text7\" text=\"{Comment}\"/>\n\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t<Column id=\"column0\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label0\" text=\"Date\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column1\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label1\" text=\"Name\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column2\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label2\" text=\"Comment\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t</columns>\n\t\t\t\t\t</Table>\n\t\t</semantic:content>\n\t\t<semantic:editAction>\n\t\t\t<semantic:EditAction id=\"edit\" press=\"onEdit\"/>\n\t\t</semantic:editAction>\n\t\t<semantic:customFooterContent>\n\t\t\t<Button enabled=\"true\" id=\"deleteButton\" press=\"onDelete\" text=\"Delete\"/>\n\t\t</semantic:customFooterContent>\n\t\t<semantic:sendEmailAction>\n\t\t\t<semantic:SendEmailAction id=\"shareEmail\" press=\"onShareEmailPress\"/>\n\t\t</semantic:sendEmailAction>\n\t\t<semantic:shareInJamAction>\n\t\t\t<semantic:ShareInJamAction id=\"shareInJam\" visible=\"{FLP>/isShareInJamActive}\" press=\"onShareInJamPress\"/>\n\t\t</semantic:shareInJamAction>\n\t\t<semantic:saveAsTileAction>\n\t\t\t<footerbar:AddBookmarkButton id=\"shareTile\" title=\"{detailView>/saveAsTileTitle}\"/>\n\t\t</semantic:saveAsTileAction>\n\t</semantic:DetailPage>\n</mvc:View>",
		"whatever/view/App.view.xml": "<mvc:View controllerName=\"whatever.controller.App\" xmlns:mvc=\"sap.ui.core.mvc\" displayBlock=\"true\" busy=\"{appView>/busy}\"\n\tbusyIndicatorDelay=\"{appView>/delay}\" xmlns=\"sap.m\">\n\t<SplitApp id=\"idAppControl\"/>\n</mvc:View>",
		"whatever/view/DetailNoObjectsAvailable.view.xml": "<mvc:View controllerName=\"whatever.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>notAvailableViewTitle}\" text=\"{i18n>noObjectsAvailableText}\" icon=\"{sap-icon://product}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",
		"whatever/view/DetailObjectNotFound.view.xml": "<mvc:View controllerName=\"whatever.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>detailTitle}\" text=\"{i18n>noObjectFoundText}\" icon=\"{sap-icon://product}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",
		"whatever/view/CreateEntity.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:f=\"sap.ui.layout.form\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" xmlns:html=\"http://www.w3.org/1999/xhtml\" controllerName=\"whatever.controller.CreateEntity\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Add Card\" id=\"create\">\n\t\t\t<content>\n\t\t\t\t\t\t\t\t<!-- Form for Product Information -->\n\t\t\t<f:SimpleForm id=\"productInformationForm\" class=\"sapUiForceWidthAuto sapUiResponsiveMargin\" minWidth=\"1024\" maxContainerCols=\"2\" editable=\"true\" layout=\"ResponsiveGridLayout\" labelSpanL=\"4\" labelSpanM=\"4\" emptySpanL=\"1\" emptySpanM=\"1\" columnsL=\"7\" columnsM=\"7\" title=\"General Information\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label id=\"nameLabel\" text=\"Product Name:\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"productNameInput\" type=\"Text\" valueStateText=\"\" maxLength=\"100\" change=\"onInputChange\" value=\"{path: 'Name'}\"/>\n\t\t\t\t\t<Label id=\"priceLabel\" text=\"Price\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"priceInput\" change=\"onNumberChange\" value=\"{Price}\" type=\"Text\" textAlign=\"Right\"/>\n\t\t\t\t\t<ComboBox id=\"currencyBox\" selectedKey=\"{CurrencyCode}\" items=\"{path: '/Currencies', length: '300'}\" selectionChange=\"onInputChange\">\n\t\t\t\t\t\t<core:Item id=\"currencyItem\" key=\"{Code}\" text=\"{Code}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"categoryLabel\" text=\"Main Category:\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"categoryBox\" selectionChange=\"onCategoryChange\" selectedKey=\"{MainCategoryId}\" items=\"{path: '/MainCategories'}\">\n\t\t\t\t\t\t<core:Item id=\"categoryItem\" key=\"{Id}\" text=\"{Name}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"emptyLabel\"/>\n\t\t\t\t\t<Label id=\"subcategoryLabel\" text=\"Sub Category:\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"subcategoryBox\" selectionChange=\"onSubcategoryChange\" selectedKey=\"{SubCategoryId}\" items=\"{path: '/SubCategories', sorter: {path: 'Name', descending: false}}\">\n\t\t\t\t\t\t<core:Item id=\"subcategoryItem\" key=\"{Id}\" text=\"{Name}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"productIdLabel\" text=\"ID\"/>\n\t\t\t\t\t<Input id=\"productIdInput\" editable=\"false\" value=\"{Id}\"/>\n\t\t\t\t\t<Label id=\"descriptionLabel\" text=\"Description\" required=\"true\"/>\n\t\t\t\t\t<TextArea id=\"descriptionArea\" valueStateText=\"\" maxLength=\"1000\" change=\"onInputChange\" value=\"{path: 'Description'}\"/>\n\t\t\t\t\t<Label id=\"supplierLabel\" text=\"Supplier Name\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"supplierInput\" type=\"Text\" valueStateText=\"\" maxLength=\"1000\" change=\"onInputChange\" showSuggestion=\"true\" suggest=\"suggestMethod\" maxSuggestionWidth=\"600px\" filterSuggests=\"false\" value=\"{path: 'SupplierName'}\"/>\n\t\t\t\t\t<Label id=\"placeHolderLabel\"/>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t<!-- Form for Physical Properties -->\n\t\t\t<f:SimpleForm id=\"physicalPropertiesForm\" class=\"sapUiForceWidthAuto sapUiResponsiveMargin\" minWidth=\"1024\" maxContainerCols=\"2\" editable=\"true\" layout=\"ResponsiveGridLayout\" labelSpanL=\"4\" labelSpanM=\"4\" emptySpanL=\"1\" emptySpanM=\"1\" columnsL=\"7\" columnsM=\"7\" title=\"Technical Data\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label id=\"unitOfMeasureLabel\" text=\"Quantity Unit\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"unitOfMeasureBox\" selectedKey=\"{QuantityUnit}\" change=\"onInputChange\" items=\"{path: '/QuantityUnits', sorter: {path: 'Shorttext', descending: false}}\">\n\t\t\t\t\t\t<core:Item id=\"unitOfMeasureItem\" key=\"{Unit}\" text=\"{Shorttext}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"heightLabel\" text=\"Height\"/>\n\t\t\t\t\t<Input id=\"heightInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionHeight}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"heightUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"heightUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"widthLabel\" text=\"Width\"/>\n\t\t\t\t\t<Input id=\"widthInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionWidth}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"widthUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"widthUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"lengthLabel\" text=\"Depth\"/>\n\t\t\t\t\t<Input id=\"lengthInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionDepth}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"lengthUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"lengthUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"weightLabel\" text=\"Weight\"/>\n\t\t\t\t\t<Input id=\"weightInput\" type=\"Text\" change=\"onNumberChange\" value=\"{WeightMeasure}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"weightUomSelect\" selectedKey=\"{WeightUnit}\" items=\"{path: '/WeightUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"weightUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\t\t\t\n\t\t\t<!--Allow adding fields at the bottom of the edit screen -->\n\t\t\t<core:ExtensionPoint name=\"extensionBottomOfEditScreen\"/>\n\t\t\t</content>\n\t\t\t<footer>\n\t    \t<OverflowToolbar id=\"footerToolbar\">\n\t\t\t\t<ToolbarSpacer id=\"footerBeginSpacer\"/>\n\t\t\t\t<Button id=\"saveButton\" text=\"Save\" press=\"onSavePressed\"/>\n\t\t\t\t<Button id=\"cancelButton\" text=\"Cancel\" press=\"onCancelPressed\"/>\n\t\t\t\t<Button id=\"shareButton\" icon=\"sap-icon://action\" press=\"onSharePressed\"/>\n\t\t\t</OverflowToolbar>\n\t\t</footer>\t\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"whatever/view/Balance.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" xmlns:html=\"http://www.w3.org/1999/xhtml\" controllerName=\"whatever.controller.Balance\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Cash Balance\" id=\"balance\">\n\t\t\t<content>\n\t\t\t\t\t<Table id=\"table0\" items=\"{path: '/Transactions', sorter: {path: 'ID', descending: false}}\" noDataText=\"No Transactions Found\">\n\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t<ColumnListItem counter=\"0\" id=\"item1\">\n\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t<Text id=\"text4\" text=\"{Date}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text5\" text=\"{Description}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text6\" text=\"${MoneyIn}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text7\" text=\"${MoneyOut}\"/>\n\t\t\t\t\t\t\t\t\t<Text id=\"text8\" text=\"${Balance}\"/>\n\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t</items>\n\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t<Column id=\"column0\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label0\" text=\"Date\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column1\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label1\" text=\"Description\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column2\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label2\" text=\"Money In\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column3\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label3\" text=\"Money Out\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t<Column id=\"column4\">\n\t\t\t\t\t\t\t\t<header>\n\t\t\t\t\t\t\t\t\t<Label id=\"label4\" text=\"Balance\"/>\n\t\t\t\t\t\t\t\t</header>\n\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t</columns>\n\t\t\t\t\t</Table>\n\t\t\t</content>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"whatever/view/NotFound.view.xml": "<mvc:View controllerName=\"whatever.controller.BaseController\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n\t<MessagePage id=\"page\" title=\"{i18n>notFoundTitle}\" text=\"{i18n>notFoundText}\" icon=\"{sap-icon://document}\" description=\"\"\n\t\tshowNavButton=\"{device>/system/phone}\" navButtonPress=\"onNavBack\"></MessagePage>\n</mvc:View>",
		"whatever/view/ViewSettingsDialog.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\n\t<ViewSettingsDialog id=\"viewSettingsDialog\" confirm=\"onConfirmViewSettingsDialog\" resetFilters=\"onViewSettingsDialogResetFilters\">\n\t\t<filterItems>\n\t\t\t<ViewSettingsFilterItem id=\"filterItems\" text=\"{i18n>masterFilterName}\" key=\"Price\" multiSelect=\"false\">\n\t\t\t\t<items>\n\t\t\t\t\t<ViewSettingsItem text=\"{i18n>masterFilter1}\" key=\"Filter1\" id=\"viewFilter1\"/>\n\t\t\t\t\t<ViewSettingsItem text=\"{i18n>masterFilter2}\" key=\"Filter2\" id=\"viewFilter2\"/>\n\t\t\t\t</items>\n\t\t\t</ViewSettingsFilterItem>\n\t\t</filterItems>\n\t</ViewSettingsDialog>\n</core:FragmentDefinition>",
		"whatever/view/tempView.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\" controllerName=\"tempView.controller.tempView\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\">\n\t<App>\n\t\t<pages>\n\t\t\t<Page title=\"Title\">\n\t\t\t\t<content></content>\n\t\t\t</Page>\n\t\t</pages>\n\t</App>\n</mvc:View>",
		"whatever/view/SupplierCard.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <QuickView id=\"supplierQuickView\">\r\n      <QuickViewPage\r\n            header=\"Supplier\"\r\n            icon=\"sap-icon://account\"\r\n            title=\"{Name}\"\r\n            description=\"{FormattedContactName}\" >\r\n         <QuickViewGroup heading=\"Contact Details\">\r\n            <QuickViewGroupElement\r\n                  label=\"Phone\"\r\n                  value=\"{Phone}\"\r\n                  type=\"phone\" />\r\n            <QuickViewGroupElement\r\n                  label=\"Address\"\r\n                  value=\"{FormattedAddress}\" />                  \r\n         </QuickViewGroup>\r\n         <QuickViewGroup heading=\"Main Contact\">\r\n            <QuickViewGroupElement\r\n                  label=\"Name\"\r\n                  value=\"{FormattedContactName}\" />\r\n            <QuickViewGroupElement\r\n                  label=\"Mobile\"\r\n                  value=\"{ContactPhone2}\" \r\n                  type=\"mobile\" />\r\n            <QuickViewGroupElement\r\n                  label=\"Landline\"\r\n                  value=\"{ContactPhone1}\" \r\n                  type=\"phone\" />\r\n            <QuickViewGroupElement\r\n                  label=\"Email\"\r\n                  value=\"{ContactEmail}\" \r\n                  type=\"email\" />                      \r\n         </QuickViewGroup>         \r\n      </QuickViewPage>\r\n   </QuickView>\r\n</core:FragmentDefinition>",
		"whatever/view/ProductEdit.view.xml": "<mvc:View xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\" xmlns:f=\"sap.ui.layout.form\" xmlns:l=\"sap.ui.layout\" xmlns:mvc=\"sap.ui.core.mvc\" controllerName=\"whatever.controller.ProductEdit\">\n\t<Page id=\"edit\" title=\"Product Edit\">\n\t\t<content>\n\t\t\t<!-- Form for Product Information -->\n\t\t\t<f:SimpleForm id=\"productInformationForm\" class=\"sapUiForceWidthAuto sapUiResponsiveMargin\" minWidth=\"1024\" maxContainerCols=\"2\" editable=\"true\" layout=\"ResponsiveGridLayout\" labelSpanL=\"4\" labelSpanM=\"4\" emptySpanL=\"1\" emptySpanM=\"1\" columnsL=\"7\" columnsM=\"7\" title=\"{i18n>xtit.generalInfo}\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label id=\"nameLabel\" text=\"{/#Product/Name/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"productNameInput\" type=\"Text\" valueStateText=\"{i18n>ymsg.errorName}\" maxLength=\"{path: '/#Product/Name/@maxLength', formatter: 'Number'}\" change=\"onInputChange\" value=\"{path: 'Name'}\"/>\n\t\t\t\t\t<Label id=\"priceLabel\" text=\"{parts:[{path: 'i18n>xfld.textConcat'}, {path: '/#Product/Price/@sap:label'}, {path: '/#Product/CurrencyCode/@sap:label'}],                 formatter: 'jQuery.sap.formatMessage'}\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"priceInput\" valueStateText=\"{i18n>ymsg.errorPrice}\" change=\"onNumberChange\" value=\"{Price}\" type=\"Text\" textAlign=\"Right\"/>\n\t\t\t\t\t<ComboBox id=\"currencyBox\" valueStateText=\"{i18n>ymsg.errorCurrency}\" selectedKey=\"{CurrencyCode}\" items=\"{path: '/Currencies', length: '300'}\" selectionChange=\"onInputChange\">\n\t\t\t\t\t\t<core:Item id=\"currencyItem\" key=\"{Code}\" text=\"{Code}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"categoryLabel\" text=\"{/#Product/MainCategoryName/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"categoryBox\" selectionChange=\"onCategoryChange\" selectedKey=\"{MainCategoryId}\" items=\"{path: '/MainCategories'}\">\n\t\t\t\t\t\t<core:Item id=\"categoryItem\" key=\"{Id}\" text=\"{Name}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"emptyLabel\"/>\n\t\t\t\t\t<Label id=\"subcategoryLabel\" text=\"{/#Product/SubCategoryName/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"subcategoryBox\" valueStateText=\"{i18n>ymsg.errorSubCategory}\" selectionChange=\"onSubcategoryChange\" selectedKey=\"{SubCategoryId}\" items=\"{path: '/SubCategories', sorter: {path: 'Name', descending: false}}\">\n\t\t\t\t\t\t<core:Item id=\"subcategoryItem\" key=\"{Id}\" text=\"{Name}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"productIdLabel\" text=\"{/#Product/Id/@sap:label}\"/>\n\t\t\t\t\t<Input id=\"productIdInput\" editable=\"false\" value=\"{Id}\"/>\n\t\t\t\t\t<Label id=\"descriptionLabel\" text=\"{/#Product/Description/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<TextArea id=\"descriptionArea\" valueStateText=\"{i18n>ymsg.errorDescription}\" maxLength=\"{path: '/#Product/Description/@maxLength', formatter: 'Number'}\" change=\"onInputChange\" value=\"{path: 'Description'}\"/>\n\t\t\t\t\t<Label id=\"supplierLabel\" text=\"{/#Product/SupplierName/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<Input id=\"supplierInput\" type=\"Text\" valueStateText=\"{i18n>ymsg.errorSupplier}\" maxLength=\"{path: '/#Product/SupplierName/@maxLength', formatter: 'Number'}\" change=\"onInputChange\" showSuggestion=\"true\" suggest=\"suggestMethod\" maxSuggestionWidth=\"600px\" filterSuggests=\"false\" value=\"{path: 'SupplierName'}\"/>\n\t\t\t\t\t<Label id=\"placeHolderLabel\"/>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\n\t\t\t<!-- Form for Physical Properties -->\n\t\t\t<f:SimpleForm id=\"physicalPropertiesForm\" class=\"sapUiForceWidthAuto sapUiResponsiveMargin\" minWidth=\"1024\" maxContainerCols=\"2\" editable=\"true\" layout=\"ResponsiveGridLayout\" labelSpanL=\"4\" labelSpanM=\"4\" emptySpanL=\"1\" emptySpanM=\"1\" columnsL=\"7\" columnsM=\"7\" title=\"{i18n>xtit.techData}\">\n\t\t\t\t<f:content>\n\t\t\t\t\t<Label id=\"unitOfMeasureLabel\" text=\"{/#Product/QuantityUnit/@sap:label}\" required=\"true\"/>\n\t\t\t\t\t<ComboBox id=\"unitOfMeasureBox\" valueStateText=\"{i18n>ymsg.errorQuantityUnit}\" selectedKey=\"{QuantityUnit}\" change=\"onInputChange\" items=\"{path: '/QuantityUnits', sorter: {path: 'Shorttext', descending: false}}\">\n\t\t\t\t\t\t<core:Item id=\"unitOfMeasureItem\" key=\"{Unit}\" text=\"{Shorttext}\"/>\n\t\t\t\t\t</ComboBox>\n\t\t\t\t\t<Label id=\"heightLabel\" text=\"{parts:[{path: 'i18n>xfld.textConcat'}, {path: '/#Product/DimensionHeight/@sap:label'}, {path: 'i18n>xfld.uoM'}],                 formatter: 'jQuery.sap.formatMessage'}\"/>\n\t\t\t\t\t<Input id=\"heightInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionHeight}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"heightUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"heightUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"widthLabel\" text=\"{parts:[{path: 'i18n>xfld.textConcat'}, {path: '/#Product/DimensionWidth/@sap:label'}, {path: 'i18n>xfld.uoM'}],                 formatter: 'jQuery.sap.formatMessage'}\"/>\n\t\t\t\t\t<Input id=\"widthInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionWidth}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"widthUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"widthUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"lengthLabel\" text=\"{parts:[{path: 'i18n>xfld.textConcat'}, {path: '/#Product/DimensionDepth/@sap:label'}, {path: 'i18n>xfld.uoM'}],                 formatter: 'jQuery.sap.formatMessage'}\"/>\n\t\t\t\t\t<Input id=\"lengthInput\" type=\"Text\" change=\"onNumberChange\" value=\"{DimensionDepth}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"lengthUomSelect\" selectedKey=\"{DimensionUnit}\" items=\"{path: '/DimensionUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"lengthUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t\t<Label id=\"weightLabel\" text=\"{parts:[{path: 'i18n>xfld.textConcat'}, {path: '/#Product/WeightMeasure/@sap:label'}, {path: 'i18n>xfld.uoM'}],                 formatter: 'jQuery.sap.formatMessage'}\"/>\n\t\t\t\t\t<Input id=\"weightInput\" type=\"Text\" change=\"onNumberChange\" value=\"{WeightMeasure}\" textAlign=\"Right\"/>\n\t\t\t\t\t<Select id=\"weightUomSelect\" selectedKey=\"{WeightUnit}\" items=\"{path: '/WeightUnits'}\" change=\"onSelectChange\">\n\t\t\t\t\t\t<core:Item id=\"weightUomItem\" key=\"{Unit}\" text=\"{Text}\"/>\n\t\t\t\t\t</Select>\n\t\t\t\t</f:content>\n\t\t\t</f:SimpleForm>\n\n\t\t\t<!-- Sub-View for Uploading/Removing Images -->\n\t\t\t<mvc:XMLView viewName=\"nw.epm.refapps.ext.prod.manage.view.ProductDraftUploadImages\" id=\"View_ImageUpload\"/>\n\t\t\t\n\t\t\t<!--Allow adding fields at the bottom of the edit screen -->\n\t\t\t<core:ExtensionPoint name=\"extensionBottomOfEditScreen\"/>\n\t\t</content>\n\t\t<footer>\n\t    \t<OverflowToolbar id=\"footerToolbar\">\n\t\t\t\t<ToolbarSpacer id=\"footerBeginSpacer\"/>\n\t\t\t\t<Button id=\"saveButton\" text=\"{i18n>xbut.save}\" press=\"onSavePressed\"/>\n\t\t\t\t<Button id=\"cancelButton\" text=\"{i18n>xbut.cancel}\" press=\"onCancelPressed\"/>\n\t\t\t\t<Button id=\"shareButton\" icon=\"sap-icon://action\" press=\"onSharePressed\"/>\n\t\t\t</OverflowToolbar>\n\t\t</footer>\t\t\n\t</Page>\n</mvc:View>",
		"whatever/view/UserCard.fragment.xml": "<core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\r\n   <QuickView id=\"userQuickView\">\r\n      <QuickViewPage\r\n            header=\"Player\"\r\n            icon=\"{ImageURL}\"\r\n            title=\"{Name}\"\r\n            description=\"{Name}\" >\r\n         <QuickViewGroup heading=\"Contact Details\">\r\n            <QuickViewGroupElement\r\n                  label=\"Phone\"\r\n                  value=\"{Phone}\"\r\n                  type=\"phone\" />\r\n            <QuickViewGroupElement\r\n                  label=\"Email\"\r\n                  value=\"{Email}\" />                  \r\n         </QuickViewGroup>\r\n      </QuickViewPage>\r\n   </QuickView>\r\n</core:FragmentDefinition>"
	}
});